# This file is autogenerated. Please change the generator code instead.
# Copyright (c) 2022 - Chris Watson and contributors
# Licensed under the MIT License. See the LICENSE file for details.

class Telegram::API
  # This object represents an incoming update.At most one of the optional parameters can be present in any
  # given update.
  class Update < Telegram::API::Type
    # The update's unique identifier. Update identifiers start from a certain positive number and increase
    # sequentially. This ID becomes especially handy if you're using Webhooks, since it allows you to ignore
    # repeated updates or to restore the correct update sequence, should they get out of order. If there are no new
    # updates for at least a week, then identifier of the next update will be chosen randomly instead of
    # sequentially.
    property update_id : Int32

    # Optional. New incoming message of any kind - text, photo, sticker, etc.
    property message : Message? = nil

    # Optional. New version of a message that is known to the bot and was edited
    property edited_message : Message? = nil

    # Optional. New incoming channel post of any kind - text, photo, sticker, etc.
    property channel_post : Message? = nil

    # Optional. New version of a channel post that is known to the bot and was edited
    property edited_channel_post : Message? = nil

    # Optional. New incoming inline query
    property inline_query : InlineQuery? = nil

    # Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see
    # our documentation on the feedback collecting for details on how to enable these updates for your bot.
    property chosen_inline_result : ChosenInlineResult? = nil

    # Optional. New incoming callback query
    property callback_query : CallbackQuery? = nil

    # Optional. New incoming shipping query. Only for invoices with flexible price
    property shipping_query : ShippingQuery? = nil

    # Optional. New incoming pre-checkout query. Contains full information about checkout
    property pre_checkout_query : PreCheckoutQuery? = nil

    # Optional. New poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot
    property poll : Poll? = nil

    # Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that
    # were sent by the bot itself.
    property poll_answer : PollAnswer? = nil

    # Optional. The bot's chat member status was updated in a chat. For private chats, this update is received
    # only when the bot is blocked or unblocked by the user.
    property my_chat_member : ChatMemberUpdated? = nil

    # Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat and must
    # explicitly specify "chat_member" in the list of allowed_updates to receive these updates.
    property chat_member : ChatMemberUpdated? = nil

    # Optional. A request to join the chat has been sent. The bot must have the can_invite_users administrator
    # right in the chat to receive these updates.
    property chat_join_request : ChatJoinRequest? = nil

    def initialize(
      @update_id : Int32,
      @message : Message? = nil,
      @edited_message : Message? = nil,
      @channel_post : Message? = nil,
      @edited_channel_post : Message? = nil,
      @inline_query : InlineQuery? = nil,
      @chosen_inline_result : ChosenInlineResult? = nil,
      @callback_query : CallbackQuery? = nil,
      @shipping_query : ShippingQuery? = nil,
      @pre_checkout_query : PreCheckoutQuery? = nil,
      @poll : Poll? = nil,
      @poll_answer : PollAnswer? = nil,
      @my_chat_member : ChatMemberUpdated? = nil,
      @chat_member : ChatMemberUpdated? = nil,
      @chat_join_request : ChatJoinRequest? = nil,
    )
    end
  end

  # Contains information about the current status of a webhook.
  class WebhookInfo < Telegram::API::Type
    # Webhook URL, may be empty if webhook is not set up
    property url : String

    # True, if a custom certificate was provided for webhook certificate checks
    property has_custom_certificate : Bool

    # Number of updates awaiting delivery
    property pending_update_count : Int32

    # Optional. Currently used webhook IP address
    property ip_address : String? = nil

    # Optional. Unix time for the most recent error that happened when trying to deliver an update via webhook
    property last_error_date : Int32? = nil

    # Optional. Error message in human-readable format for the most recent error that happened when trying to
    # deliver an update via webhook
    property last_error_message : String? = nil

    # Optional. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
    property max_connections : Int32? = nil

    # Optional. A list of update types the bot is subscribed to. Defaults to all update types except chat_member
    property allowed_updates : Array(String) = Array(String).new

    def initialize(
      @url : String,
      @has_custom_certificate : Bool,
      @pending_update_count : Int32,
      @ip_address : String? = nil,
      @last_error_date : Int32? = nil,
      @last_error_message : String? = nil,
      @max_connections : Int32? = nil,
      @allowed_updates : Array(String) = Array(String).new,
    )
    end
  end

  # This object represents a Telegram user or bot.
  class User < Telegram::API::Type
    # Unique identifier for this user or bot. This number may have more than 32 significant bits and some
    # programming languages may have difficulty/silent defects in interpreting it. But it has at most 52
    # significant bits, so a 64-bit integer or double-precision float type are safe for storing this
    # identifier.
    property id : Int64

    # True, if this user is a bot
    property is_bot : Bool

    # User's or bot's first name
    property first_name : String

    # Optional. User's or bot's last name
    property last_name : String? = nil

    # Optional. User's or bot's username
    property username : String? = nil

    # Optional. IETF language tag of the user's language
    property language_code : String? = nil

    # Optional. True, if the bot can be invited to groups. Returned only in getMe.
    property can_join_groups : Bool? = nil

    # Optional. True, if privacy mode is disabled for the bot. Returned only in getMe.
    property can_read_all_group_messages : Bool? = nil

    # Optional. True, if the bot supports inline queries. Returned only in getMe.
    property supports_inline_queries : Bool? = nil

    def initialize(
      @id : Int64,
      @is_bot : Bool,
      @first_name : String,
      @last_name : String? = nil,
      @username : String? = nil,
      @language_code : String? = nil,
      @can_join_groups : Bool? = nil,
      @can_read_all_group_messages : Bool? = nil,
      @supports_inline_queries : Bool? = nil,
    )
    end
  end

  # This object represents a chat.
  class Chat < Telegram::API::Type
    # Unique identifier for this chat. This number may have more than 32 significant bits and some programming
    # languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits,
    # so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
    property id : Int64

    # Type of chat, can be either "private", "group", "supergroup" or "channel"
    property type : String

    # Optional. Title, for supergroups, channels and group chats
    property title : String? = nil

    # Optional. Username, for private chats, supergroups and channels if available
    property username : String? = nil

    # Optional. First name of the other party in a private chat
    property first_name : String? = nil

    # Optional. Last name of the other party in a private chat
    property last_name : String? = nil

    # Optional. Chat photo. Returned only in getChat.
    property photo : ChatPhoto? = nil

    # Optional. Bio of the other party in a private chat. Returned only in getChat.
    property bio : String? = nil

    # Optional. True, if privacy settings of the other party in the private chat allows to use
    # tg://user?id=<user_id> links only in chats with the user. Returned only in getChat.
    property has_private_forwards : Bool? = nil

    # Optional. Description, for groups, supergroups and channel chats. Returned only in getChat.
    property description : String? = nil

    # Optional. Primary invite link, for groups, supergroups and channel chats. Returned only in getChat.
    property invite_link : String? = nil

    # Optional. The most recent pinned message (by sending date). Returned only in getChat.
    property pinned_message : Message? = nil

    # Optional. Default chat member permissions, for groups and supergroups. Returned only in getChat.
    property permissions : ChatPermissions? = nil

    # Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each
    # unpriviledged user; in seconds. Returned only in getChat.
    property slow_mode_delay : Int32? = nil

    # Optional. The time after which all messages sent to the chat will be automatically deleted; in seconds.
    # Returned only in getChat.
    property message_auto_delete_time : Int32? = nil

    # Optional. True, if messages from the chat can't be forwarded to other chats. Returned only in getChat.
    property has_protected_content : Bool? = nil

    # Optional. For supergroups, name of group sticker set. Returned only in getChat.
    property sticker_set_name : String? = nil

    # Optional. True, if the bot can change the group sticker set. Returned only in getChat.
    property can_set_sticker_set : Bool? = nil

    # Optional. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and
    # vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some
    # programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52
    # bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
    # Returned only in getChat.
    property linked_chat_id : Int32? = nil

    # Optional. For supergroups, the location to which the supergroup is connected. Returned only in getChat.
    property location : ChatLocation? = nil

    def initialize(
      @id : Int64,
      @type : String,
      @title : String? = nil,
      @username : String? = nil,
      @first_name : String? = nil,
      @last_name : String? = nil,
      @photo : ChatPhoto? = nil,
      @bio : String? = nil,
      @has_private_forwards : Bool? = nil,
      @description : String? = nil,
      @invite_link : String? = nil,
      @pinned_message : Message? = nil,
      @permissions : ChatPermissions? = nil,
      @slow_mode_delay : Int32? = nil,
      @message_auto_delete_time : Int32? = nil,
      @has_protected_content : Bool? = nil,
      @sticker_set_name : String? = nil,
      @can_set_sticker_set : Bool? = nil,
      @linked_chat_id : Int32? = nil,
      @location : ChatLocation? = nil,
    )
    end
  end

  # This object represents a message.
  class Message < Telegram::API::Type
    # Unique message identifier inside this chat
    property message_id : Int32

    # Optional. Sender of the message; empty for messages sent to channels. For backward compatibility, the
    # field contains a fake sender user in non-channel chats, if the message was sent on behalf of a chat.
    property from : User? = nil

    # Optional. Sender of the message, sent on behalf of a chat. For example, the channel itself for channel
    # posts, the supergroup itself for messages from anonymous group administrators, the linked channel for
    # messages automatically forwarded to the discussion group.  For backward compatibility, the field from
    # contains a fake sender user in non-channel chats, if the message was sent on behalf of a chat.
    property sender_chat : Chat? = nil

    # Date the message was sent in Unix time
    @[JSON::Field(converter: Time::EpochConverter)]
    property date : Time

    # Conversation the message belongs to
    property chat : Chat

    # Optional. For forwarded messages, sender of the original message
    property forward_from : User? = nil

    # Optional. For messages forwarded from channels or from anonymous administrators, information about the
    # original sender chat
    property forward_from_chat : Chat? = nil

    # Optional. For messages forwarded from channels, identifier of the original message in the channel
    property forward_from_message_id : Int32? = nil

    # Optional. For forwarded messages that were originally sent in channels or by an anonymous chat
    # administrator, signature of the message sender if present
    property forward_signature : String? = nil

    # Optional. Sender's name for messages forwarded from users who disallow adding a link to their account in
    # forwarded messages
    property forward_sender_name : String? = nil

    # Optional. For forwarded messages, date the original message was sent in Unix time
    @[JSON::Field(converter: Time::EpochConverter)]
    property forward_date : Time? = nil

    # Optional. True, if the message is a channel post that was automatically forwarded to the connected
    # discussion group
    property is_automatic_forward : Bool? = nil

    # Optional. For replies, the original message. Note that the Message object in this field will not contain
    # further reply_to_message fields even if it itself is a reply.
    property reply_to_message : Message? = nil

    # Optional. Bot through which the message was sent
    property via_bot : User? = nil

    # Optional. Date the message was last edited in Unix time
    @[JSON::Field(converter: Time::EpochConverter)]
    property edit_date : Time? = nil

    # Optional. True, if the message can't be forwarded
    property has_protected_content : Bool? = nil

    # Optional. The unique identifier of a media message group this message belongs to
    property media_group_id : String? = nil

    # Optional. Signature of the post author for messages in channels, or the custom title of an anonymous group
    # administrator
    property author_signature : String? = nil

    # Optional. For text messages, the actual UTF-8 text of the message, 0-4096 characters
    property text : String? = nil

    # Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the
    # text
    property entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Message is an animation, information about the animation. For backward compatibility, when
    # this field is set, the document field will also be set
    property animation : Animation? = nil

    # Optional. Message is an audio file, information about the file
    property audio : Audio? = nil

    # Optional. Message is a general file, information about the file
    property document : Document? = nil

    # Optional. Message is a photo, available sizes of the photo
    property photo : Array(PhotoSize) = Array(PhotoSize).new

    # Optional. Message is a sticker, information about the sticker
    property sticker : Sticker? = nil

    # Optional. Message is a video, information about the video
    property video : Video? = nil

    # Optional. Message is a video note, information about the video message
    property video_note : VideoNote? = nil

    # Optional. Message is a voice message, information about the file
    property voice : Voice? = nil

    # Optional. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
    property caption : String? = nil

    # Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that
    # appear in the caption
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Message is a shared contact, information about the contact
    property contact : Contact? = nil

    # Optional. Message is a dice with random value
    property dice : Dice? = nil

    # Optional. Message is a game, information about the game. More about games:
    # https://core.telegram.org/bots/api#games
    property game : Game? = nil

    # Optional. Message is a native poll, information about the poll
    property poll : Poll? = nil

    # Optional. Message is a venue, information about the venue. For backward compatibility, when this field is
    # set, the location field will also be set
    property venue : Venue? = nil

    # Optional. Message is a shared location, information about the location
    property location : Location? = nil

    # Optional. New members that were added to the group or supergroup and information about them (the bot itself
    # may be one of these members)
    property new_chat_members : Array(User) = Array(User).new

    # Optional. A member was removed from the group, information about them (this member may be the bot itself)
    property left_chat_member : User? = nil

    # Optional. A chat title was changed to this value
    property new_chat_title : String? = nil

    # Optional. A chat photo was change to this value
    property new_chat_photo : Array(PhotoSize) = Array(PhotoSize).new

    # Optional. Service message: the chat photo was deleted
    property delete_chat_photo : Bool? = nil

    # Optional. Service message: the group has been created
    property group_chat_created : Bool? = nil

    # Optional. Service message: the supergroup has been created. This field can't be received in a message
    # coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found
    # in reply_to_message if someone replies to a very first message in a directly created supergroup.
    property supergroup_chat_created : Bool? = nil

    # Optional. Service message: the channel has been created. This field can't be received in a message coming
    # through updates, because bot can't be a member of a channel when it is created. It can only be found in
    # reply_to_message if someone replies to a very first message in a channel.
    property channel_chat_created : Bool? = nil

    # Optional. Service message: auto-delete timer settings changed in the chat
    property message_auto_delete_timer_changed : MessageAutoDeleteTimerChanged? = nil

    # Optional. The group has been migrated to a supergroup with the specified identifier. This number may have
    # more than 32 significant bits and some programming languages may have difficulty/silent defects in
    # interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision
    # float type are safe for storing this identifier.
    property migrate_to_chat_id : Int32? = nil

    # Optional. The supergroup has been migrated from a group with the specified identifier. This number may
    # have more than 32 significant bits and some programming languages may have difficulty/silent defects in
    # interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision
    # float type are safe for storing this identifier.
    property migrate_from_chat_id : Int32? = nil

    # Optional. Specified message was pinned. Note that the Message object in this field will not contain
    # further reply_to_message fields even if it is itself a reply.
    property pinned_message : Message? = nil

    # Optional. Message is an invoice for a payment, information about the invoice. More about payments:
    # https://core.telegram.org/bots/api#payments
    property invoice : Invoice? = nil

    # Optional. Message is a service message about a successful payment, information about the payment. More
    # about payments: https://core.telegram.org/bots/api#payments
    property successful_payment : SuccessfulPayment? = nil

    # Optional. The domain name of the website on which the user has logged in. More about Telegram Login:
    # https://core.telegram.org/widgets/login
    property connected_website : String? = nil

    # Optional. Telegram Passport data
    property passport_data : PassportData? = nil

    # Optional. Service message. A user in the chat triggered another user's proximity alert while sharing Live
    # Location.
    property proximity_alert_triggered : ProximityAlertTriggered? = nil

    # Optional. Service message: voice chat scheduled
    property voice_chat_scheduled : VoiceChatScheduled? = nil

    # Optional. Service message: voice chat started
    property voice_chat_started : VoiceChatStarted? = nil

    # Optional. Service message: voice chat ended
    property voice_chat_ended : VoiceChatEnded? = nil

    # Optional. Service message: new participants invited to a voice chat
    property voice_chat_participants_invited : VoiceChatParticipantsInvited? = nil

    # Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url
    # buttons.
    property reply_markup : InlineKeyboardMarkup? = nil

    def initialize(
      @message_id : Int32,
      @date : Time,
      @chat : Chat,
      @from : User? = nil,
      @sender_chat : Chat? = nil,
      @forward_from : User? = nil,
      @forward_from_chat : Chat? = nil,
      @forward_from_message_id : Int32? = nil,
      @forward_signature : String? = nil,
      @forward_sender_name : String? = nil,
      @forward_date : Time? = nil,
      @is_automatic_forward : Bool? = nil,
      @reply_to_message : Message? = nil,
      @via_bot : User? = nil,
      @edit_date : Time? = nil,
      @has_protected_content : Bool? = nil,
      @media_group_id : String? = nil,
      @author_signature : String? = nil,
      @text : String? = nil,
      @animation : Animation? = nil,
      @audio : Audio? = nil,
      @document : Document? = nil,
      @sticker : Sticker? = nil,
      @video : Video? = nil,
      @video_note : VideoNote? = nil,
      @voice : Voice? = nil,
      @caption : String? = nil,
      @contact : Contact? = nil,
      @dice : Dice? = nil,
      @game : Game? = nil,
      @poll : Poll? = nil,
      @venue : Venue? = nil,
      @location : Location? = nil,
      @left_chat_member : User? = nil,
      @new_chat_title : String? = nil,
      @delete_chat_photo : Bool? = nil,
      @group_chat_created : Bool? = nil,
      @supergroup_chat_created : Bool? = nil,
      @channel_chat_created : Bool? = nil,
      @message_auto_delete_timer_changed : MessageAutoDeleteTimerChanged? = nil,
      @migrate_to_chat_id : Int32? = nil,
      @migrate_from_chat_id : Int32? = nil,
      @pinned_message : Message? = nil,
      @invoice : Invoice? = nil,
      @successful_payment : SuccessfulPayment? = nil,
      @connected_website : String? = nil,
      @passport_data : PassportData? = nil,
      @proximity_alert_triggered : ProximityAlertTriggered? = nil,
      @voice_chat_scheduled : VoiceChatScheduled? = nil,
      @voice_chat_started : VoiceChatStarted? = nil,
      @voice_chat_ended : VoiceChatEnded? = nil,
      @voice_chat_participants_invited : VoiceChatParticipantsInvited? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @entities : Array(MessageEntity) = Array(MessageEntity).new,
      @photo : Array(PhotoSize) = Array(PhotoSize).new,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
      @new_chat_members : Array(User) = Array(User).new,
      @new_chat_photo : Array(PhotoSize) = Array(PhotoSize).new,
    )
    end
  end

  # This object represents a unique message identifier.
  class MessageId < Telegram::API::Type
    # Unique message identifier
    property message_id : Int32

    def initialize(
      @message_id : Int32,
    )
    end
  end

  # This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
  class MessageEntity < Telegram::API::Type
    # Type of the entity. Currently, can be "mention" (@username), "hashtag" (#hashtag), "cashtag" ($USD),
    # "bot_command" (/start@jobs_bot), "url" (https://telegram.org), "email"
    # (do-not-reply@telegram.org), "phone_number" (+1-212-555-0123), "bold" (bold text), "italic"
    # (italic text), "underline" (underlined text), "strikethrough" (strikethrough text), "spoiler"
    # (spoiler message), "code" (monowidth string), "pre" (monowidth block), "text_link" (for clickable
    # text URLs), "text_mention" (for users without usernames)
    property type : String

    # Offset in UTF-16 code units to the start of the entity
    property offset : Int32

    # Length of the entity in UTF-16 code units
    property length : Int32

    # Optional. For "text_link" only, url that will be opened after user taps on the text
    property url : String? = nil

    # Optional. For "text_mention" only, the mentioned user
    property user : User? = nil

    # Optional. For "pre" only, the programming language of the entity text
    property language : String? = nil

    def initialize(
      @type : String,
      @offset : Int32,
      @length : Int32,
      @url : String? = nil,
      @user : User? = nil,
      @language : String? = nil,
    )
    end
  end

  # This object represents one size of a photo or a file / sticker thumbnail.
  class PhotoSize < Telegram::API::Type
    # Identifier for this file, which can be used to download or reuse the file
    property file_id : String

    # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be
    # used to download or reuse the file.
    property file_unique_id : String

    # Photo width
    property width : Int32

    # Photo height
    property height : Int32

    # Optional. File size in bytes
    property file_size : Int32? = nil

    def initialize(
      @file_id : String,
      @file_unique_id : String,
      @width : Int32,
      @height : Int32,
      @file_size : Int32? = nil,
    )
    end
  end

  # This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
  class Animation < Telegram::API::Type
    # Identifier for this file, which can be used to download or reuse the file
    property file_id : String

    # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be
    # used to download or reuse the file.
    property file_unique_id : String

    # Video width as defined by sender
    property width : Int32

    # Video height as defined by sender
    property height : Int32

    # Duration of the video in seconds as defined by sender
    property duration : Int32

    # Optional. Animation thumbnail as defined by sender
    property thumb : PhotoSize? = nil

    # Optional. Original animation filename as defined by sender
    property file_name : String? = nil

    # Optional. MIME type of the file as defined by sender
    property mime_type : String? = nil

    # Optional. File size in bytes
    property file_size : Int32? = nil

    def initialize(
      @file_id : String,
      @file_unique_id : String,
      @width : Int32,
      @height : Int32,
      @duration : Int32,
      @thumb : PhotoSize? = nil,
      @file_name : String? = nil,
      @mime_type : String? = nil,
      @file_size : Int32? = nil,
    )
    end
  end

  # This object represents an audio file to be treated as music by the Telegram clients.
  class Audio < Telegram::API::Type
    # Identifier for this file, which can be used to download or reuse the file
    property file_id : String

    # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be
    # used to download or reuse the file.
    property file_unique_id : String

    # Duration of the audio in seconds as defined by sender
    property duration : Int32

    # Optional. Performer of the audio as defined by sender or by audio tags
    property performer : String? = nil

    # Optional. Title of the audio as defined by sender or by audio tags
    property title : String? = nil

    # Optional. Original filename as defined by sender
    property file_name : String? = nil

    # Optional. MIME type of the file as defined by sender
    property mime_type : String? = nil

    # Optional. File size in bytes
    property file_size : Int32? = nil

    # Optional. Thumbnail of the album cover to which the music file belongs
    property thumb : PhotoSize? = nil

    def initialize(
      @file_id : String,
      @file_unique_id : String,
      @duration : Int32,
      @performer : String? = nil,
      @title : String? = nil,
      @file_name : String? = nil,
      @mime_type : String? = nil,
      @file_size : Int32? = nil,
      @thumb : PhotoSize? = nil,
    )
    end
  end

  # This object represents a general file (as opposed to photos, voice messages and audio files).
  class Document < Telegram::API::Type
    # Identifier for this file, which can be used to download or reuse the file
    property file_id : String

    # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be
    # used to download or reuse the file.
    property file_unique_id : String

    # Optional. Document thumbnail as defined by sender
    property thumb : PhotoSize? = nil

    # Optional. Original filename as defined by sender
    property file_name : String? = nil

    # Optional. MIME type of the file as defined by sender
    property mime_type : String? = nil

    # Optional. File size in bytes
    property file_size : Int32? = nil

    def initialize(
      @file_id : String,
      @file_unique_id : String,
      @thumb : PhotoSize? = nil,
      @file_name : String? = nil,
      @mime_type : String? = nil,
      @file_size : Int32? = nil,
    )
    end
  end

  # This object represents a video file.
  class Video < Telegram::API::Type
    # Identifier for this file, which can be used to download or reuse the file
    property file_id : String

    # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be
    # used to download or reuse the file.
    property file_unique_id : String

    # Video width as defined by sender
    property width : Int32

    # Video height as defined by sender
    property height : Int32

    # Duration of the video in seconds as defined by sender
    property duration : Int32

    # Optional. Video thumbnail
    property thumb : PhotoSize? = nil

    # Optional. Original filename as defined by sender
    property file_name : String? = nil

    # Optional. Mime type of a file as defined by sender
    property mime_type : String? = nil

    # Optional. File size in bytes
    property file_size : Int32? = nil

    def initialize(
      @file_id : String,
      @file_unique_id : String,
      @width : Int32,
      @height : Int32,
      @duration : Int32,
      @thumb : PhotoSize? = nil,
      @file_name : String? = nil,
      @mime_type : String? = nil,
      @file_size : Int32? = nil,
    )
    end
  end

  # This object represents a video message (available in Telegram apps as of v.4.0).
  class VideoNote < Telegram::API::Type
    # Identifier for this file, which can be used to download or reuse the file
    property file_id : String

    # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be
    # used to download or reuse the file.
    property file_unique_id : String

    # Video width and height (diameter of the video message) as defined by sender
    property length : Int32

    # Duration of the video in seconds as defined by sender
    property duration : Int32

    # Optional. Video thumbnail
    property thumb : PhotoSize? = nil

    # Optional. File size in bytes
    property file_size : Int32? = nil

    def initialize(
      @file_id : String,
      @file_unique_id : String,
      @length : Int32,
      @duration : Int32,
      @thumb : PhotoSize? = nil,
      @file_size : Int32? = nil,
    )
    end
  end

  # This object represents a voice note.
  class Voice < Telegram::API::Type
    # Identifier for this file, which can be used to download or reuse the file
    property file_id : String

    # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be
    # used to download or reuse the file.
    property file_unique_id : String

    # Duration of the audio in seconds as defined by sender
    property duration : Int32

    # Optional. MIME type of the file as defined by sender
    property mime_type : String? = nil

    # Optional. File size in bytes
    property file_size : Int32? = nil

    def initialize(
      @file_id : String,
      @file_unique_id : String,
      @duration : Int32,
      @mime_type : String? = nil,
      @file_size : Int32? = nil,
    )
    end
  end

  # This object represents a phone contact.
  class Contact < Telegram::API::Type
    # Contact's phone number
    property phone_number : String

    # Contact's first name
    property first_name : String

    # Optional. Contact's last name
    property last_name : String? = nil

    # Optional. Contact's user identifier in Telegram. This number may have more than 32 significant bits and
    # some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52
    # significant bits, so a 64-bit integer or double-precision float type are safe for storing this
    # identifier.
    property user_id : Int64? = nil

    # Optional. Additional data about the contact in the form of a vCard
    property vcard : String? = nil

    def initialize(
      @phone_number : String,
      @first_name : String,
      @last_name : String? = nil,
      @user_id : Int64? = nil,
      @vcard : String? = nil,
    )
    end
  end

  # This object represents an animated emoji that displays a random value.
  class Dice < Telegram::API::Type
    # Emoji on which the dice throw animation is based
    property emoji : String

    # Value of the dice, 1-6 for "🎲", "🎯" and "🎳" base emoji, 1-5 for "🏀" and "⚽" base emoji, 1-64 for "🎰" base emoji
    property value : Int32

    def initialize(
      @emoji : String,
      @value : Int32,
    )
    end
  end

  # This object contains information about one answer option in a poll.
  class PollOption < Telegram::API::Type
    # Option text, 1-100 characters
    property text : String

    # Number of users that voted for this option
    property voter_count : Int32

    def initialize(
      @text : String,
      @voter_count : Int32,
    )
    end
  end

  # This object represents an answer of a user in a non-anonymous poll.
  class PollAnswer < Telegram::API::Type
    # Unique poll identifier
    property poll_id : String

    # The user, who changed the answer to the poll
    property user : User

    # 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.
    property option_ids : Array(Int32) = Array(Int32).new

    def initialize(
      @poll_id : String,
      @user : User,
      @option_ids : Array(Int32) = Array(Int32).new,
    )
    end
  end

  # This object contains information about a poll.
  class Poll < Telegram::API::Type
    # Unique poll identifier
    property id : String

    # Poll question, 1-300 characters
    property question : String

    # List of poll options
    property options : Array(PollOption) = Array(PollOption).new

    # Total number of users that voted in the poll
    property total_voter_count : Int32

    # True, if the poll is closed
    property is_closed : Bool

    # True, if the poll is anonymous
    property is_anonymous : Bool

    # Poll type, currently can be "regular" or "quiz"
    property type : String

    # True, if the poll allows multiple answers
    property allows_multiple_answers : Bool

    # Optional. 0-based identifier of the correct answer option. Available only for polls in the quiz mode,
    # which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
    property correct_option_id : Int32? = nil

    # Optional. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style
    # poll, 0-200 characters
    property explanation : String? = nil

    # Optional. Special entities like usernames, URLs, bot commands, etc. that appear in the explanation
    property explanation_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Amount of time in seconds the poll will be active after creation
    property open_period : Int32? = nil

    # Optional. Point in time (Unix timestamp) when the poll will be automatically closed
    property close_date : Int32? = nil

    def initialize(
      @id : String,
      @question : String,
      @total_voter_count : Int32,
      @is_closed : Bool,
      @is_anonymous : Bool,
      @type : String,
      @allows_multiple_answers : Bool,
      @options : Array(PollOption) = Array(PollOption).new,
      @correct_option_id : Int32? = nil,
      @explanation : String? = nil,
      @open_period : Int32? = nil,
      @close_date : Int32? = nil,
      @explanation_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # This object represents a point on the map.
  class Location < Telegram::API::Type
    # Longitude as defined by sender
    property longitude : Float64

    # Latitude as defined by sender
    property latitude : Float64

    # Optional. The radius of uncertainty for the location, measured in meters; 0-1500
    property horizontal_accuracy : Float64? = nil

    # Optional. Time relative to the message sending date, during which the location can be updated; in seconds.
    # For active live locations only.
    property live_period : Int32? = nil

    # Optional. The direction in which user is moving, in degrees; 1-360. For active live locations only.
    property heading : Int32? = nil

    # Optional. Maximum distance for proximity alerts about approaching another chat member, in meters. For
    # sent live locations only.
    property proximity_alert_radius : Int32? = nil

    def initialize(
      @longitude : Float64,
      @latitude : Float64,
      @horizontal_accuracy : Float64? = nil,
      @live_period : Int32? = nil,
      @heading : Int32? = nil,
      @proximity_alert_radius : Int32? = nil,
    )
    end
  end

  # This object represents a venue.
  class Venue < Telegram::API::Type
    # Venue location. Can't be a live location
    property location : Location

    # Name of the venue
    property title : String

    # Address of the venue
    property address : String

    # Optional. Foursquare identifier of the venue
    property foursquare_id : String? = nil

    # Optional. Foursquare type of the venue. (For example, "arts_entertainment/default",
    # "arts_entertainment/aquarium" or "food/icecream".)
    property foursquare_type : String? = nil

    # Optional. Google Places identifier of the venue
    property google_place_id : String? = nil

    # Optional. Google Places type of the venue. (See supported types.)
    property google_place_type : String? = nil

    def initialize(
      @location : Location,
      @title : String,
      @address : String,
      @foursquare_id : String? = nil,
      @foursquare_type : String? = nil,
      @google_place_id : String? = nil,
      @google_place_type : String? = nil,
    )
    end
  end

  # This object represents the content of a service message, sent whenever a user in the chat triggers a
  # proximity alert set by another user.
  class ProximityAlertTriggered < Telegram::API::Type
    # User that triggered the alert
    property traveler : User

    # User that set the alert
    property watcher : User

    # The distance between the users
    property distance : Int32

    def initialize(
      @traveler : User,
      @watcher : User,
      @distance : Int32,
    )
    end
  end

  # This object represents a service message about a change in auto-delete timer settings.
  class MessageAutoDeleteTimerChanged < Telegram::API::Type
    # New auto-delete time for messages in the chat; in seconds
    property message_auto_delete_time : Int32

    def initialize(
      @message_auto_delete_time : Int32,
    )
    end
  end

  # This object represents a service message about a voice chat scheduled in the chat.
  class VoiceChatScheduled < Telegram::API::Type
    # Point in time (Unix timestamp) when the voice chat is supposed to be started by a chat administrator
    property start_date : Int32

    def initialize(
      @start_date : Int32,
    )
    end
  end

  # This object represents a service message about a voice chat started in the chat. Currently holds no
  # information.
  class VoiceChatStarted < Telegram::API::Type
  end

  # This object represents a service message about a voice chat ended in the chat.
  class VoiceChatEnded < Telegram::API::Type
    # Voice chat duration in seconds
    property duration : Int32

    def initialize(
      @duration : Int32,
    )
    end
  end

  # This object represents a service message about new members invited to a voice chat.
  class VoiceChatParticipantsInvited < Telegram::API::Type
    # Optional. New members that were invited to the voice chat
    property users : Array(User) = Array(User).new

    def initialize(
      @users : Array(User) = Array(User).new,
    )
    end
  end

  # This object represent a user's profile pictures.
  class UserProfilePhotos < Telegram::API::Type
    # Total number of profile pictures the target user has
    property total_count : Int32

    # Requested profile pictures (in up to 4 sizes each)
    property photos : Array(Array(PhotoSize)) = Array(Array(PhotoSize)).new

    def initialize(
      @total_count : Int32,
      @photos : Array(Array(PhotoSize)) = Array(Array(PhotoSize)).new,
    )
    end
  end

  # This object represents a file ready to be downloaded. The file can be downloaded via the link
  # https://api.telegram.org/file/bot<token>/<file_path>. It is guaranteed that the link will be valid
  # for at least 1 hour. When the link expires, a new one can be requested by calling getFile.
  class File < Telegram::API::Type
    # Identifier for this file, which can be used to download or reuse the file
    property file_id : String

    # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be
    # used to download or reuse the file.
    property file_unique_id : String

    # Optional. File size in bytes, if known
    property file_size : Int32? = nil

    # Optional. File path. Use https://api.telegram.org/file/bot<token>/<file_path> to get the file.
    property file_path : String? = nil

    def initialize(
      @file_id : String,
      @file_unique_id : String,
      @file_size : Int32? = nil,
      @file_path : String? = nil,
    )
    end
  end

  # This object represents a custom keyboard with reply options (see Introduction to bots for details and
  # examples).
  class ReplyKeyboardMarkup < Telegram::API::Type
    # Array of button rows, each represented by an Array of KeyboardButton objects
    property keyboard : Array(Array(KeyboardButton)) = Array(Array(KeyboardButton)).new

    # Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard
    # smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is
    # always of the same height as the app's standard keyboard.
    property resize_keyboard : Bool? = nil

    # Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be
    # available, but clients will automatically display the usual letter-keyboard in the chat - the user can
    # press a special button in the input field to see the custom keyboard again. Defaults to false.
    property one_time_keyboard : Bool? = nil

    # Optional. The placeholder to be shown in the input field when the keyboard is active; 1-64 characters
    property input_field_placeholder : String? = nil

    # Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that
    # are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has
    # reply_to_message_id), sender of the original message. Example: A user requests to change the bot's
    # language, bot replies to the request with a keyboard to select the new language. Other users in the group
    # don't see the keyboard.
    property selective : Bool? = nil

    def initialize(
      @keyboard : Array(Array(KeyboardButton)) = Array(Array(KeyboardButton)).new,
      @resize_keyboard : Bool? = nil,
      @one_time_keyboard : Bool? = nil,
      @input_field_placeholder : String? = nil,
      @selective : Bool? = nil,
    )
    end
  end

  # This object represents one button of the reply keyboard. For simple text buttons String can be used instead
  # of this object to specify text of the button. Optional fields request_contact, request_location, and
  # request_poll are mutually exclusive. Note: request_contact and request_location options will only
  # work in Telegram versions released after 9 April, 2016. Older clients will display unsupported
  # message.Note: request_poll option will only work in Telegram versions released after 23 January, 2020.
  # Older clients will display unsupported message.
  class KeyboardButton < Telegram::API::Type
    # Text of the button. If none of the optional fields are used, it will be sent as a message when the button is
    # pressed
    property text : String

    # Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in
    # private chats only
    property request_contact : Bool? = nil

    # Optional. If True, the user's current location will be sent when the button is pressed. Available in
    # private chats only
    property request_location : Bool? = nil

    # Optional. If specified, the user will be asked to create a poll and send it to the bot when the button is
    # pressed. Available in private chats only
    property request_poll : KeyboardButtonPollType? = nil

    def initialize(
      @text : String,
      @request_contact : Bool? = nil,
      @request_location : Bool? = nil,
      @request_poll : KeyboardButtonPollType? = nil,
    )
    end
  end

  # This object represents type of a poll, which is allowed to be created and sent when the corresponding button
  # is pressed.
  class KeyboardButtonPollType < Telegram::API::Type
    # Optional. If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is
    # passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.
    property type : String? = nil

    def initialize(
      @type : String? = nil,
    )
    end
  end

  # Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and
  # display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is
  # sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user
  # presses a button (see ReplyKeyboardMarkup).
  class ReplyKeyboardRemove < Telegram::API::Type
    # Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to
    # hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup)
    property remove_keyboard : Bool

    # Optional. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users
    # that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has
    # reply_to_message_id), sender of the original message. Example: A user votes in a poll, bot returns
    # confirmation message in reply to the vote and removes the keyboard for that user, while still showing the
    # keyboard with poll options to users who haven't voted yet.
    property selective : Bool? = nil

    def initialize(
      @remove_keyboard : Bool,
      @selective : Bool? = nil,
    )
    end
  end

  # This object represents an inline keyboard that appears right next to the message it belongs to. Note: This
  # will only work in Telegram versions released after 9 April, 2016. Older clients will display unsupported
  # message.
  class InlineKeyboardMarkup < Telegram::API::Type
    # Array of button rows, each represented by an Array of InlineKeyboardButton objects
    property inline_keyboard : Array(Array(InlineKeyboardButton)) = Array(Array(InlineKeyboardButton)).new

    def initialize(
      @inline_keyboard : Array(Array(InlineKeyboardButton)) = Array(Array(InlineKeyboardButton)).new,
    )
    end
  end

  # This object represents one button of an inline keyboard. You must use exactly one of the optional fields.
  class InlineKeyboardButton < Telegram::API::Type
    # Label text on the button
    property text : String

    # Optional. HTTP or tg:// url to be opened when the button is pressed. Links tg://user?id=<user_id> can be
    # used to mention a user by their ID without using a username, if this is allowed by their privacy settings.
    property url : String? = nil

    # Optional. An HTTP URL used to automatically authorize the user. Can be used as a replacement for the
    # Telegram Login Widget.
    property login_url : LoginUrl? = nil

    # Optional. Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes
    property callback_data : String? = nil

    # Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and
    # insert the bot's username and the specified inline query in the input field. Can be empty, in which case just
    # the bot's username will be inserted. Note: This offers an easy way for users to start using your bot in inline
    # mode when they are currently in a private chat with it. Especially useful when combined with switch_pm...
    # actions - in this case the user will be automatically returned to the chat they switched from, skipping the
    # chat selection screen.
    property switch_inline_query : String? = nil

    # Optional. If set, pressing the button will insert the bot's username and the specified inline query in the
    # current chat's input field. Can be empty, in which case only the bot's username will be inserted. This
    # offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something
    # from multiple options.
    property switch_inline_query_current_chat : String? = nil

    # Optional. Description of the game that will be launched when the user presses the button. NOTE: This type of
    # button must always be the first button in the first row.
    property callback_game : CallbackGame? = nil

    # Optional. Specify True, to send a Pay button. NOTE: This type of button must always be the first button in the
    # first row and can only be used in invoice messages.
    property pay : Bool? = nil

    def initialize(
      @text : String,
      @url : String? = nil,
      @login_url : LoginUrl? = nil,
      @callback_data : String? = nil,
      @switch_inline_query : String? = nil,
      @switch_inline_query_current_chat : String? = nil,
      @callback_game : CallbackGame? = nil,
      @pay : Bool? = nil,
    )
    end
  end

  # This object represents a parameter of the inline keyboard button used to automatically authorize a user.
  # Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram. All the
  # user needs to do is tap/click a button and confirm that they want to log in: Telegram apps support these
  # buttons as of version 5.7.
  class LoginUrl < Telegram::API::Type
    # An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If
    # the user refuses to provide authorization data, the original URL without information about the user will
    # be opened. The data added is the same as described in Receiving authorization data. NOTE: You must always
    # check the hash of the received data to verify the authentication and the integrity of the data as described
    # in Checking authorization.
    property url : String

    # Optional. New text of the button in forwarded messages.
    property forward_text : String? = nil

    # Optional. Username of a bot, which will be used for user authorization. See Setting up a bot for more
    # details. If not specified, the current bot's username will be assumed. The url's domain must be the same as
    # the domain linked with the bot. See Linking your domain to the bot for more details.
    property bot_username : String? = nil

    # Optional. Pass True to request the permission for your bot to send messages to the user.
    property request_write_access : Bool? = nil

    def initialize(
      @url : String,
      @forward_text : String? = nil,
      @bot_username : String? = nil,
      @request_write_access : Bool? = nil,
    )
    end
  end

  # This object represents an incoming callback query from a callback button in an inline keyboard. If the
  # button that originated the query was attached to a message sent by the bot, the field message will be
  # present. If the button was attached to a message sent via the bot (in inline mode), the field
  # inline_message_id will be present. Exactly one of the fields data or game_short_name will be present.
  class CallbackQuery < Telegram::API::Type
    # Unique identifier for this query
    property id : String

    # Sender
    property from : User

    # Optional. Message with the callback button that originated the query. Note that message content and
    # message date will not be available if the message is too old
    property message : Message? = nil

    # Optional. Identifier of the message sent via the bot in inline mode, that originated the query.
    property inline_message_id : String? = nil

    # Global identifier, uniquely corresponding to the chat to which the message with the callback button was
    # sent. Useful for high scores in games.
    property chat_instance : String

    # Optional. Data associated with the callback button. Be aware that a bad client can send arbitrary data in
    # this field.
    property data : String? = nil

    # Optional. Short name of a Game to be returned, serves as the unique identifier for the game
    property game_short_name : String? = nil

    def initialize(
      @id : String,
      @from : User,
      @chat_instance : String,
      @message : Message? = nil,
      @inline_message_id : String? = nil,
      @data : String? = nil,
      @game_short_name : String? = nil,
    )
    end
  end

  # Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act
  # as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to
  # create user-friendly step-by-step interfaces without having to sacrifice privacy mode.
  class ForceReply < Telegram::API::Type
    # Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
    property force_reply : Bool

    # Optional. The placeholder to be shown in the input field when the reply is active; 1-64 characters
    property input_field_placeholder : String? = nil

    # Optional. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are
    # @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id),
    # sender of the original message.
    property selective : Bool? = nil

    def initialize(
      @force_reply : Bool,
      @input_field_placeholder : String? = nil,
      @selective : Bool? = nil,
    )
    end
  end

  # This object represents a chat photo.
  class ChatPhoto < Telegram::API::Type
    # File identifier of small (160x160) chat photo. This file_id can be used only for photo download and only for
    # as long as the photo is not changed.
    property small_file_id : String

    # Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for
    # different bots. Can't be used to download or reuse the file.
    property small_file_unique_id : String

    # File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as
    # long as the photo is not changed.
    property big_file_id : String

    # Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for
    # different bots. Can't be used to download or reuse the file.
    property big_file_unique_id : String

    def initialize(
      @small_file_id : String,
      @small_file_unique_id : String,
      @big_file_id : String,
      @big_file_unique_id : String,
    )
    end
  end

  # Represents an invite link for a chat.
  class ChatInviteLink < Telegram::API::Type
    # The invite link. If the link was created by another chat administrator, then the second part of the link will
    # be replaced with "...".
    property invite_link : String

    # Creator of the link
    property creator : User

    # True, if users joining the chat via the link need to be approved by chat administrators
    property creates_join_request : Bool

    # True, if the link is primary
    property is_primary : Bool

    # True, if the link is revoked
    property is_revoked : Bool

    # Optional. Invite link name
    property name : String? = nil

    # Optional. Point in time (Unix timestamp) when the link will expire or has been expired
    property expire_date : Int32? = nil

    # Optional. Maximum number of users that can be members of the chat simultaneously after joining the chat via
    # this invite link; 1-99999
    property member_limit : Int32? = nil

    # Optional. Number of pending join requests created using this link
    property pending_join_request_count : Int32? = nil

    def initialize(
      @invite_link : String,
      @creator : User,
      @creates_join_request : Bool,
      @is_primary : Bool,
      @is_revoked : Bool,
      @name : String? = nil,
      @expire_date : Int32? = nil,
      @member_limit : Int32? = nil,
      @pending_join_request_count : Int32? = nil,
    )
    end
  end

  # This object contains information about one member of a chat. Currently, the following 6 types of chat
  # members are supported: - ChatMemberOwner - ChatMemberAdministrator - ChatMemberMember -
  # ChatMemberRestricted - ChatMemberLeft - ChatMemberBanned
  class ChatMember < Telegram::API::Type
  end

  # Represents a chat member that owns the chat and has all administrator privileges.
  class ChatMemberOwner < Telegram::API::Type
    # The member's status in the chat, always "creator"
    property status : String

    # Information about the user
    property user : User

    # True, if the user's presence in the chat is hidden
    property is_anonymous : Bool

    # Optional. Custom title for this user
    property custom_title : String? = nil

    def initialize(
      @status : String,
      @user : User,
      @is_anonymous : Bool,
      @custom_title : String? = nil,
    )
    end
  end

  # Represents a chat member that has some additional privileges.
  class ChatMemberAdministrator < Telegram::API::Type
    # The member's status in the chat, always "administrator"
    property status : String

    # Information about the user
    property user : User

    # True, if the bot is allowed to edit administrator privileges of that user
    property can_be_edited : Bool

    # True, if the user's presence in the chat is hidden
    property is_anonymous : Bool

    # True, if the administrator can access the chat event log, chat statistics, message statistics in
    # channels, see channel members, see anonymous administrators in supergroups and ignore slow mode.
    # Implied by any other administrator privilege
    property can_manage_chat : Bool

    # True, if the administrator can delete messages of other users
    property can_delete_messages : Bool

    # True, if the administrator can manage voice chats
    property can_manage_voice_chats : Bool

    # True, if the administrator can restrict, ban or unban chat members
    property can_restrict_members : Bool

    # True, if the administrator can add new administrators with a subset of their own privileges or demote
    # administrators that he has promoted, directly or indirectly (promoted by administrators that were
    # appointed by the user)
    property can_promote_members : Bool

    # True, if the user is allowed to change the chat title, photo and other settings
    property can_change_info : Bool

    # True, if the user is allowed to invite new users to the chat
    property can_invite_users : Bool

    # Optional. True, if the administrator can post in the channel; channels only
    property can_post_messages : Bool? = nil

    # Optional. True, if the administrator can edit messages of other users and can pin messages; channels only
    property can_edit_messages : Bool? = nil

    # Optional. True, if the user is allowed to pin messages; groups and supergroups only
    property can_pin_messages : Bool? = nil

    # Optional. Custom title for this user
    property custom_title : String? = nil

    def initialize(
      @status : String,
      @user : User,
      @can_be_edited : Bool,
      @is_anonymous : Bool,
      @can_manage_chat : Bool,
      @can_delete_messages : Bool,
      @can_manage_voice_chats : Bool,
      @can_restrict_members : Bool,
      @can_promote_members : Bool,
      @can_change_info : Bool,
      @can_invite_users : Bool,
      @can_post_messages : Bool? = nil,
      @can_edit_messages : Bool? = nil,
      @can_pin_messages : Bool? = nil,
      @custom_title : String? = nil,
    )
    end
  end

  # Represents a chat member that has no additional privileges or restrictions.
  class ChatMemberMember < Telegram::API::Type
    # The member's status in the chat, always "member"
    property status : String

    # Information about the user
    property user : User

    def initialize(
      @status : String,
      @user : User,
    )
    end
  end

  # Represents a chat member that is under certain restrictions in the chat. Supergroups only.
  class ChatMemberRestricted < Telegram::API::Type
    # The member's status in the chat, always "restricted"
    property status : String

    # Information about the user
    property user : User

    # True, if the user is a member of the chat at the moment of the request
    property is_member : Bool

    # True, if the user is allowed to change the chat title, photo and other settings
    property can_change_info : Bool

    # True, if the user is allowed to invite new users to the chat
    property can_invite_users : Bool

    # True, if the user is allowed to pin messages
    property can_pin_messages : Bool

    # True, if the user is allowed to send text messages, contacts, locations and venues
    property can_send_messages : Bool

    # True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes
    property can_send_media_messages : Bool

    # True, if the user is allowed to send polls
    property can_send_polls : Bool

    # True, if the user is allowed to send animations, games, stickers and use inline bots
    property can_send_other_messages : Bool

    # True, if the user is allowed to add web page previews to their messages
    property can_add_web_page_previews : Bool

    # Date when restrictions will be lifted for this user; unix time. If 0, then the user is restricted forever
    property until_date : Int32

    def initialize(
      @status : String,
      @user : User,
      @is_member : Bool,
      @can_change_info : Bool,
      @can_invite_users : Bool,
      @can_pin_messages : Bool,
      @can_send_messages : Bool,
      @can_send_media_messages : Bool,
      @can_send_polls : Bool,
      @can_send_other_messages : Bool,
      @can_add_web_page_previews : Bool,
      @until_date : Int32,
    )
    end
  end

  # Represents a chat member that isn't currently a member of the chat, but may join it themselves.
  class ChatMemberLeft < Telegram::API::Type
    # The member's status in the chat, always "left"
    property status : String

    # Information about the user
    property user : User

    def initialize(
      @status : String,
      @user : User,
    )
    end
  end

  # Represents a chat member that was banned in the chat and can't return to the chat or view chat messages.
  class ChatMemberBanned < Telegram::API::Type
    # The member's status in the chat, always "kicked"
    property status : String

    # Information about the user
    property user : User

    # Date when restrictions will be lifted for this user; unix time. If 0, then the user is banned forever
    property until_date : Int32

    def initialize(
      @status : String,
      @user : User,
      @until_date : Int32,
    )
    end
  end

  # This object represents changes in the status of a chat member.
  class ChatMemberUpdated < Telegram::API::Type
    # Chat the user belongs to
    property chat : Chat

    # Performer of the action, which resulted in the change
    property from : User

    # Date the change was done in Unix time
    @[JSON::Field(converter: Time::EpochConverter)]
    property date : Time

    # Previous information about the chat member
    property old_chat_member : ChatMember

    # New information about the chat member
    property new_chat_member : ChatMember

    # Optional. Chat invite link, which was used by the user to join the chat; for joining by invite link events
    # only.
    property invite_link : ChatInviteLink? = nil

    def initialize(
      @chat : Chat,
      @from : User,
      @date : Time,
      @old_chat_member : ChatMember,
      @new_chat_member : ChatMember,
      @invite_link : ChatInviteLink? = nil,
    )
    end
  end

  # Represents a join request sent to a chat.
  class ChatJoinRequest < Telegram::API::Type
    # Chat to which the request was sent
    property chat : Chat

    # User that sent the join request
    property from : User

    # Date the request was sent in Unix time
    @[JSON::Field(converter: Time::EpochConverter)]
    property date : Time

    # Optional. Bio of the user.
    property bio : String? = nil

    # Optional. Chat invite link that was used by the user to send the join request
    property invite_link : ChatInviteLink? = nil

    def initialize(
      @chat : Chat,
      @from : User,
      @date : Time,
      @bio : String? = nil,
      @invite_link : ChatInviteLink? = nil,
    )
    end
  end

  # Describes actions that a non-administrator user is allowed to take in a chat.
  class ChatPermissions < Telegram::API::Type
    # Optional. True, if the user is allowed to send text messages, contacts, locations and venues
    property can_send_messages : Bool? = nil

    # Optional. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice
    # notes, implies can_send_messages
    property can_send_media_messages : Bool? = nil

    # Optional. True, if the user is allowed to send polls, implies can_send_messages
    property can_send_polls : Bool? = nil

    # Optional. True, if the user is allowed to send animations, games, stickers and use inline bots, implies
    # can_send_media_messages
    property can_send_other_messages : Bool? = nil

    # Optional. True, if the user is allowed to add web page previews to their messages, implies
    # can_send_media_messages
    property can_add_web_page_previews : Bool? = nil

    # Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public
    # supergroups
    property can_change_info : Bool? = nil

    # Optional. True, if the user is allowed to invite new users to the chat
    property can_invite_users : Bool? = nil

    # Optional. True, if the user is allowed to pin messages. Ignored in public supergroups
    property can_pin_messages : Bool? = nil

    def initialize(
      @can_send_messages : Bool? = nil,
      @can_send_media_messages : Bool? = nil,
      @can_send_polls : Bool? = nil,
      @can_send_other_messages : Bool? = nil,
      @can_add_web_page_previews : Bool? = nil,
      @can_change_info : Bool? = nil,
      @can_invite_users : Bool? = nil,
      @can_pin_messages : Bool? = nil,
    )
    end
  end

  # Represents a location to which a chat is connected.
  class ChatLocation < Telegram::API::Type
    # The location to which the supergroup is connected. Can't be a live location.
    property location : Location

    # Location address; 1-64 characters, as defined by the chat owner
    property address : String

    def initialize(
      @location : Location,
      @address : String,
    )
    end
  end

  # This object represents a bot command.
  class BotCommand < Telegram::API::Type
    # Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and
    # underscores.
    property command : String

    # Description of the command; 1-256 characters.
    property description : String

    def initialize(
      @command : String,
      @description : String,
    )
    end
  end

  # Represents the default scope of bot commands. Default commands are used if no commands with a narrower
  # scope are specified for the user.
  class BotCommandScopeDefault < Telegram::API::Type
    # Scope type, must be default
    property type : String

    def initialize(
      @type : String,
    )
    end
  end

  # Represents the scope of bot commands, covering all private chats.
  class BotCommandScopeAllPrivateChats < Telegram::API::Type
    # Scope type, must be all_private_chats
    property type : String

    def initialize(
      @type : String,
    )
    end
  end

  # Represents the scope of bot commands, covering all group and supergroup chats.
  class BotCommandScopeAllGroupChats < Telegram::API::Type
    # Scope type, must be all_group_chats
    property type : String

    def initialize(
      @type : String,
    )
    end
  end

  # Represents the scope of bot commands, covering all group and supergroup chat administrators.
  class BotCommandScopeAllChatAdministrators < Telegram::API::Type
    # Scope type, must be all_chat_administrators
    property type : String

    def initialize(
      @type : String,
    )
    end
  end

  # Represents the scope of bot commands, covering a specific chat.
  class BotCommandScopeChat < Telegram::API::Type
    # Scope type, must be chat
    property type : String

    # Unique identifier for the target chat or username of the target supergroup (in the format
    # @supergroupusername)
    property chat_id : (Int64 | String)

    def initialize(
      @type : String,
      @chat_id : (Int64 | String),
    )
    end
  end

  # Represents the scope of bot commands, covering all administrators of a specific group or supergroup chat.
  class BotCommandScopeChatAdministrators < Telegram::API::Type
    # Scope type, must be chat_administrators
    property type : String

    # Unique identifier for the target chat or username of the target supergroup (in the format
    # @supergroupusername)
    property chat_id : (Int64 | String)

    def initialize(
      @type : String,
      @chat_id : (Int64 | String),
    )
    end
  end

  # Represents the scope of bot commands, covering a specific member of a group or supergroup chat.
  class BotCommandScopeChatMember < Telegram::API::Type
    # Scope type, must be chat_member
    property type : String

    # Unique identifier for the target chat or username of the target supergroup (in the format
    # @supergroupusername)
    property chat_id : (Int64 | String)

    # Unique identifier of the target user
    property user_id : Int64

    def initialize(
      @type : String,
      @chat_id : (Int64 | String),
      @user_id : Int64,
    )
    end
  end

  # Contains information about why a request was unsuccessful.
  class ResponseParameters < Telegram::API::Type
    # Optional. The group has been migrated to a supergroup with the specified identifier. This number may have
    # more than 32 significant bits and some programming languages may have difficulty/silent defects in
    # interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision
    # float type are safe for storing this identifier.
    property migrate_to_chat_id : Int32? = nil

    # Optional. In case of exceeding flood control, the number of seconds left to wait before the request can be
    # repeated
    property retry_after : Int32? = nil

    def initialize(
      @migrate_to_chat_id : Int32? = nil,
      @retry_after : Int32? = nil,
    )
    end
  end

  # Represents a photo to be sent.
  class InputMediaPhoto < Telegram::API::Type
    # Type of the result, must be photo
    property type : String

    # File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP
    # URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one
    # using multipart/form-data under <file_attach_name> name. More info on Sending Files:
    # https://core.telegram.org/bots/api#sending-files
    property media : String

    # Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    def initialize(
      @type : String,
      @media : String,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents a video to be sent.
  class InputMediaVideo < Telegram::API::Type
    # Type of the result, must be video
    property type : String

    # File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP
    # URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one
    # using multipart/form-data under <file_attach_name> name. More info on Sending Files:
    # https://core.telegram.org/bots/api#sending-files
    property media : String

    # Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
    # server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and
    # height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails
    # can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the
    # thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending
    # Files: https://core.telegram.org/bots/api#sending-files
    property thumb : (InputFile | String)? = nil

    # Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the video caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Video width
    property width : Int32? = nil

    # Optional. Video height
    property height : Int32? = nil

    # Optional. Video duration in seconds
    property duration : Int32? = nil

    # Optional. Pass True, if the uploaded video is suitable for streaming
    property supports_streaming : Bool? = nil

    def initialize(
      @type : String,
      @media : String,
      @thumb : (InputFile | String)? = nil,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @width : Int32? = nil,
      @height : Int32? = nil,
      @duration : Int32? = nil,
      @supports_streaming : Bool? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
  class InputMediaAnimation < Telegram::API::Type
    # Type of the result, must be animation
    property type : String

    # File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP
    # URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one
    # using multipart/form-data under <file_attach_name> name. More info on Sending Files:
    # https://core.telegram.org/bots/api#sending-files
    property media : String

    # Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
    # server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and
    # height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails
    # can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the
    # thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending
    # Files: https://core.telegram.org/bots/api#sending-files
    property thumb : (InputFile | String)? = nil

    # Optional. Caption of the animation to be sent, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the animation caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Animation width
    property width : Int32? = nil

    # Optional. Animation height
    property height : Int32? = nil

    # Optional. Animation duration in seconds
    property duration : Int32? = nil

    def initialize(
      @type : String,
      @media : String,
      @thumb : (InputFile | String)? = nil,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @width : Int32? = nil,
      @height : Int32? = nil,
      @duration : Int32? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents an audio file to be treated as music to be sent.
  class InputMediaAudio < Telegram::API::Type
    # Type of the result, must be audio
    property type : String

    # File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP
    # URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one
    # using multipart/form-data under <file_attach_name> name. More info on Sending Files:
    # https://core.telegram.org/bots/api#sending-files
    property media : String

    # Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
    # server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and
    # height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails
    # can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the
    # thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending
    # Files: https://core.telegram.org/bots/api#sending-files
    property thumb : (InputFile | String)? = nil

    # Optional. Caption of the audio to be sent, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the audio caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Duration of the audio in seconds
    property duration : Int32? = nil

    # Optional. Performer of the audio
    property performer : String? = nil

    # Optional. Title of the audio
    property title : String? = nil

    def initialize(
      @type : String,
      @media : String,
      @thumb : (InputFile | String)? = nil,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @duration : Int32? = nil,
      @performer : String? = nil,
      @title : String? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents a general file to be sent.
  class InputMediaDocument < Telegram::API::Type
    # Type of the result, must be document
    property type : String

    # File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP
    # URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one
    # using multipart/form-data under <file_attach_name> name. More info on Sending Files:
    # https://core.telegram.org/bots/api#sending-files
    property media : String

    # Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
    # server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and
    # height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails
    # can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the
    # thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending
    # Files: https://core.telegram.org/bots/api#sending-files
    property thumb : (InputFile | String)? = nil

    # Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the document caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Disables automatic server-side content type detection for files uploaded using
    # multipart/form-data. Always True, if the document is sent as part of an album.
    property disable_content_type_detection : Bool? = nil

    def initialize(
      @type : String,
      @media : String,
      @thumb : (InputFile | String)? = nil,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @disable_content_type_detection : Bool? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # This object represents a sticker.
  class Sticker < Telegram::API::Type
    # Identifier for this file, which can be used to download or reuse the file
    property file_id : String

    # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be
    # used to download or reuse the file.
    property file_unique_id : String

    # Sticker width
    property width : Int32

    # Sticker height
    property height : Int32

    # True, if the sticker is animated
    property is_animated : Bool

    # Optional. Sticker thumbnail in the .WEBP or .JPG format
    property thumb : PhotoSize? = nil

    # Optional. Emoji associated with the sticker
    property emoji : String? = nil

    # Optional. Name of the sticker set to which the sticker belongs
    property set_name : String? = nil

    # Optional. For mask stickers, the position where the mask should be placed
    property mask_position : MaskPosition? = nil

    # Optional. File size in bytes
    property file_size : Int32? = nil

    def initialize(
      @file_id : String,
      @file_unique_id : String,
      @width : Int32,
      @height : Int32,
      @is_animated : Bool,
      @thumb : PhotoSize? = nil,
      @emoji : String? = nil,
      @set_name : String? = nil,
      @mask_position : MaskPosition? = nil,
      @file_size : Int32? = nil,
    )
    end
  end

  # This object represents a sticker set.
  class StickerSet < Telegram::API::Type
    # Sticker set name
    property name : String

    # Sticker set title
    property title : String

    # True, if the sticker set contains animated stickers
    property is_animated : Bool

    # True, if the sticker set contains masks
    property contains_masks : Bool

    # List of all set stickers
    property stickers : Array(Sticker) = Array(Sticker).new

    # Optional. Sticker set thumbnail in the .WEBP or .TGS format
    property thumb : PhotoSize? = nil

    def initialize(
      @name : String,
      @title : String,
      @is_animated : Bool,
      @contains_masks : Bool,
      @stickers : Array(Sticker) = Array(Sticker).new,
      @thumb : PhotoSize? = nil,
    )
    end
  end

  # This object describes the position on faces where a mask should be placed by default.
  class MaskPosition < Telegram::API::Type
    # The part of the face relative to which the mask should be placed. One of "forehead", "eyes", "mouth", or
    # "chin".
    property point : String

    # Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example,
    # choosing -1.0 will place mask just to the left of the default mask position.
    property x_shift : Float64

    # Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0
    # will place the mask just below the default mask position.
    property y_shift : Float64

    # Mask scaling coefficient. For example, 2.0 means double size.
    property scale : Float64

    def initialize(
      @point : String,
      @x_shift : Float64,
      @y_shift : Float64,
      @scale : Float64,
    )
    end
  end

  # This object represents an incoming inline query. When the user sends an empty query, your bot could return
  # some default or trending results.
  class InlineQuery < Telegram::API::Type
    # Unique identifier for this query
    property id : String

    # Sender
    property from : User

    # Text of the query (up to 256 characters)
    property query : String

    # Offset of the results to be returned, can be controlled by the bot
    property offset : String

    # Optional. Type of the chat, from which the inline query was sent. Can be either "sender" for a private chat
    # with the inline query sender, "private", "group", "supergroup", or "channel". The chat type should be
    # always known for requests sent from official clients and most third-party clients, unless the request was
    # sent from a secret chat
    property chat_type : String? = nil

    # Optional. Sender location, only for bots that request user location
    property location : Location? = nil

    def initialize(
      @id : String,
      @from : User,
      @query : String,
      @offset : String,
      @chat_type : String? = nil,
      @location : Location? = nil,
    )
    end
  end

  # This object represents one result of an inline query. Telegram clients currently support results of the
  # following 20 types: - InlineQueryResultCachedAudio - InlineQueryResultCachedDocument -
  # InlineQueryResultCachedGif - InlineQueryResultCachedMpeg4Gif - InlineQueryResultCachedPhoto -
  # InlineQueryResultCachedSticker - InlineQueryResultCachedVideo - InlineQueryResultCachedVoice -
  # InlineQueryResultArticle - InlineQueryResultAudio - InlineQueryResultContact -
  # InlineQueryResultGame - InlineQueryResultDocument - InlineQueryResultGif -
  # InlineQueryResultLocation - InlineQueryResultMpeg4Gif - InlineQueryResultPhoto -
  # InlineQueryResultVenue - InlineQueryResultVideo - InlineQueryResultVoice Note: All URLs passed in
  # inline query results will be available to end users and therefore must be assumed to be public.
  class InlineQueryResult < Telegram::API::Type
  end

  # Represents a link to an article or web page.
  class InlineQueryResultArticle < Telegram::API::Type
    # Type of the result, must be article
    property type : String

    # Unique identifier for this result, 1-64 Bytes
    property id : String

    # Title of the result
    property title : String

    # Content of the message to be sent
    property input_message_content : InputMessageContent

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. URL of the result
    property url : String? = nil

    # Optional. Pass True, if you don't want the URL to be shown in the message
    property hide_url : Bool? = nil

    # Optional. Short description of the result
    property description : String? = nil

    # Optional. Url of the thumbnail for the result
    property thumb_url : String? = nil

    # Optional. Thumbnail width
    property thumb_width : Int32? = nil

    # Optional. Thumbnail height
    property thumb_height : Int32? = nil

    def initialize(
      @type : String,
      @id : String,
      @title : String,
      @input_message_content : InputMessageContent,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @url : String? = nil,
      @hide_url : Bool? = nil,
      @description : String? = nil,
      @thumb_url : String? = nil,
      @thumb_width : Int32? = nil,
      @thumb_height : Int32? = nil,
    )
    end
  end

  # Represents a link to a photo. By default, this photo will be sent by the user with optional caption.
  # Alternatively, you can use input_message_content to send a message with the specified content instead of
  # the photo.
  class InlineQueryResultPhoto < Telegram::API::Type
    # Type of the result, must be photo
    property type : String

    # Unique identifier for this result, 1-64 bytes
    property id : String

    # A valid URL of the photo. Photo must be in JPEG format. Photo size must not exceed 5MB
    property photo_url : String

    # URL of the thumbnail for the photo
    property thumb_url : String

    # Optional. Width of the photo
    property photo_width : Int32? = nil

    # Optional. Height of the photo
    property photo_height : Int32? = nil

    # Optional. Title for the result
    property title : String? = nil

    # Optional. Short description of the result
    property description : String? = nil

    # Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the photo
    property input_message_content : InputMessageContent? = nil

    def initialize(
      @type : String,
      @id : String,
      @photo_url : String,
      @thumb_url : String,
      @photo_width : Int32? = nil,
      @photo_height : Int32? = nil,
      @title : String? = nil,
      @description : String? = nil,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with
  # optional caption. Alternatively, you can use input_message_content to send a message with the specified
  # content instead of the animation.
  class InlineQueryResultGif < Telegram::API::Type
    # Type of the result, must be gif
    property type : String

    # Unique identifier for this result, 1-64 bytes
    property id : String

    # A valid URL for the GIF file. File size must not exceed 1MB
    property gif_url : String

    # Optional. Width of the GIF
    property gif_width : Int32? = nil

    # Optional. Height of the GIF
    property gif_height : Int32? = nil

    # Optional. Duration of the GIF in seconds
    property gif_duration : Int32? = nil

    # URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
    property thumb_url : String

    # Optional. MIME type of the thumbnail, must be one of "image/jpeg", "image/gif", or "video/mp4". Defaults
    # to "image/jpeg"
    property thumb_mime_type : String? = nil

    # Optional. Title for the result
    property title : String? = nil

    # Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the GIF animation
    property input_message_content : InputMessageContent? = nil

    def initialize(
      @type : String,
      @id : String,
      @gif_url : String,
      @thumb_url : String,
      @gif_width : Int32? = nil,
      @gif_height : Int32? = nil,
      @gif_duration : Int32? = nil,
      @thumb_mime_type : String? = nil,
      @title : String? = nil,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated
  # MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use
  # input_message_content to send a message with the specified content instead of the animation.
  class InlineQueryResultMpeg4Gif < Telegram::API::Type
    # Type of the result, must be mpeg4_gif
    property type : String

    # Unique identifier for this result, 1-64 bytes
    property id : String

    # A valid URL for the MP4 file. File size must not exceed 1MB
    property mpeg4_url : String

    # Optional. Video width
    property mpeg4_width : Int32? = nil

    # Optional. Video height
    property mpeg4_height : Int32? = nil

    # Optional. Video duration in seconds
    property mpeg4_duration : Int32? = nil

    # URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
    property thumb_url : String

    # Optional. MIME type of the thumbnail, must be one of "image/jpeg", "image/gif", or "video/mp4". Defaults
    # to "image/jpeg"
    property thumb_mime_type : String? = nil

    # Optional. Title for the result
    property title : String? = nil

    # Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the video animation
    property input_message_content : InputMessageContent? = nil

    def initialize(
      @type : String,
      @id : String,
      @mpeg4_url : String,
      @thumb_url : String,
      @mpeg4_width : Int32? = nil,
      @mpeg4_height : Int32? = nil,
      @mpeg4_duration : Int32? = nil,
      @thumb_mime_type : String? = nil,
      @title : String? = nil,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents a link to a page containing an embedded video player or a video file. By default, this video file
  # will be sent by the user with an optional caption. Alternatively, you can use input_message_content to
  # send a message with the specified content instead of the video.
  class InlineQueryResultVideo < Telegram::API::Type
    # Type of the result, must be video
    property type : String

    # Unique identifier for this result, 1-64 bytes
    property id : String

    # A valid URL for the embedded video player or video file
    property video_url : String

    # Mime type of the content of video url, "text/html" or "video/mp4"
    property mime_type : String

    # URL of the thumbnail (JPEG only) for the video
    property thumb_url : String

    # Title for the result
    property title : String

    # Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the video caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Video width
    property video_width : Int32? = nil

    # Optional. Video height
    property video_height : Int32? = nil

    # Optional. Video duration in seconds
    property video_duration : Int32? = nil

    # Optional. Short description of the result
    property description : String? = nil

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the video. This field is required if
    # InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video).
    property input_message_content : InputMessageContent? = nil

    def initialize(
      @type : String,
      @id : String,
      @video_url : String,
      @mime_type : String,
      @thumb_url : String,
      @title : String,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @video_width : Int32? = nil,
      @video_height : Int32? = nil,
      @video_duration : Int32? = nil,
      @description : String? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively,
  # you can use input_message_content to send a message with the specified content instead of the audio. Note:
  # This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
  class InlineQueryResultAudio < Telegram::API::Type
    # Type of the result, must be audio
    property type : String

    # Unique identifier for this result, 1-64 bytes
    property id : String

    # A valid URL for the audio file
    property audio_url : String

    # Title
    property title : String

    # Optional. Caption, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the audio caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Performer
    property performer : String? = nil

    # Optional. Audio duration in seconds
    property audio_duration : Int32? = nil

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the audio
    property input_message_content : InputMessageContent? = nil

    def initialize(
      @type : String,
      @id : String,
      @audio_url : String,
      @title : String,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @performer : String? = nil,
      @audio_duration : Int32? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice
  # recording will be sent by the user. Alternatively, you can use input_message_content to send a message
  # with the specified content instead of the the voice message. Note: This will only work in Telegram versions
  # released after 9 April, 2016. Older clients will ignore them.
  class InlineQueryResultVoice < Telegram::API::Type
    # Type of the result, must be voice
    property type : String

    # Unique identifier for this result, 1-64 bytes
    property id : String

    # A valid URL for the voice recording
    property voice_url : String

    # Recording title
    property title : String

    # Optional. Caption, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the voice message caption. See formatting options for more
    # details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Recording duration in seconds
    property voice_duration : Int32? = nil

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the voice recording
    property input_message_content : InputMessageContent? = nil

    def initialize(
      @type : String,
      @id : String,
      @voice_url : String,
      @title : String,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @voice_duration : Int32? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents a link to a file. By default, this file will be sent by the user with an optional caption.
  # Alternatively, you can use input_message_content to send a message with the specified content instead of
  # the file. Currently, only .PDF and .ZIP files can be sent using this method. Note: This will only work in
  # Telegram versions released after 9 April, 2016. Older clients will ignore them.
  class InlineQueryResultDocument < Telegram::API::Type
    # Type of the result, must be document
    property type : String

    # Unique identifier for this result, 1-64 bytes
    property id : String

    # Title for the result
    property title : String

    # Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the document caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # A valid URL for the file
    property document_url : String

    # Mime type of the content of the file, either "application/pdf" or "application/zip"
    property mime_type : String

    # Optional. Short description of the result
    property description : String? = nil

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the file
    property input_message_content : InputMessageContent? = nil

    # Optional. URL of the thumbnail (JPEG only) for the file
    property thumb_url : String? = nil

    # Optional. Thumbnail width
    property thumb_width : Int32? = nil

    # Optional. Thumbnail height
    property thumb_height : Int32? = nil

    def initialize(
      @type : String,
      @id : String,
      @title : String,
      @document_url : String,
      @mime_type : String,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @description : String? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @thumb_url : String? = nil,
      @thumb_width : Int32? = nil,
      @thumb_height : Int32? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use
  # input_message_content to send a message with the specified content instead of the location. Note: This
  # will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
  class InlineQueryResultLocation < Telegram::API::Type
    # Type of the result, must be location
    property type : String

    # Unique identifier for this result, 1-64 Bytes
    property id : String

    # Location latitude in degrees
    property latitude : Float64

    # Location longitude in degrees
    property longitude : Float64

    # Location title
    property title : String

    # Optional. The radius of uncertainty for the location, measured in meters; 0-1500
    property horizontal_accuracy : Float64? = nil

    # Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.
    property live_period : Int32? = nil

    # Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360
    # if specified.
    property heading : Int32? = nil

    # Optional. For live locations, a maximum distance for proximity alerts about approaching another chat
    # member, in meters. Must be between 1 and 100000 if specified.
    property proximity_alert_radius : Int32? = nil

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the location
    property input_message_content : InputMessageContent? = nil

    # Optional. Url of the thumbnail for the result
    property thumb_url : String? = nil

    # Optional. Thumbnail width
    property thumb_width : Int32? = nil

    # Optional. Thumbnail height
    property thumb_height : Int32? = nil

    def initialize(
      @type : String,
      @id : String,
      @latitude : Float64,
      @longitude : Float64,
      @title : String,
      @horizontal_accuracy : Float64? = nil,
      @live_period : Int32? = nil,
      @heading : Int32? = nil,
      @proximity_alert_radius : Int32? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @thumb_url : String? = nil,
      @thumb_width : Int32? = nil,
      @thumb_height : Int32? = nil,
    )
    end
  end

  # Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use
  # input_message_content to send a message with the specified content instead of the venue. Note: This will
  # only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
  class InlineQueryResultVenue < Telegram::API::Type
    # Type of the result, must be venue
    property type : String

    # Unique identifier for this result, 1-64 Bytes
    property id : String

    # Latitude of the venue location in degrees
    property latitude : Float64

    # Longitude of the venue location in degrees
    property longitude : Float64

    # Title of the venue
    property title : String

    # Address of the venue
    property address : String

    # Optional. Foursquare identifier of the venue if known
    property foursquare_id : String? = nil

    # Optional. Foursquare type of the venue, if known. (For example, "arts_entertainment/default",
    # "arts_entertainment/aquarium" or "food/icecream".)
    property foursquare_type : String? = nil

    # Optional. Google Places identifier of the venue
    property google_place_id : String? = nil

    # Optional. Google Places type of the venue. (See supported types.)
    property google_place_type : String? = nil

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the venue
    property input_message_content : InputMessageContent? = nil

    # Optional. Url of the thumbnail for the result
    property thumb_url : String? = nil

    # Optional. Thumbnail width
    property thumb_width : Int32? = nil

    # Optional. Thumbnail height
    property thumb_height : Int32? = nil

    def initialize(
      @type : String,
      @id : String,
      @latitude : Float64,
      @longitude : Float64,
      @title : String,
      @address : String,
      @foursquare_id : String? = nil,
      @foursquare_type : String? = nil,
      @google_place_id : String? = nil,
      @google_place_type : String? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @thumb_url : String? = nil,
      @thumb_width : Int32? = nil,
      @thumb_height : Int32? = nil,
    )
    end
  end

  # Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively,
  # you can use input_message_content to send a message with the specified content instead of the contact.
  # Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore
  # them.
  class InlineQueryResultContact < Telegram::API::Type
    # Type of the result, must be contact
    property type : String

    # Unique identifier for this result, 1-64 Bytes
    property id : String

    # Contact's phone number
    property phone_number : String

    # Contact's first name
    property first_name : String

    # Optional. Contact's last name
    property last_name : String? = nil

    # Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes
    property vcard : String? = nil

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the contact
    property input_message_content : InputMessageContent? = nil

    # Optional. Url of the thumbnail for the result
    property thumb_url : String? = nil

    # Optional. Thumbnail width
    property thumb_width : Int32? = nil

    # Optional. Thumbnail height
    property thumb_height : Int32? = nil

    def initialize(
      @type : String,
      @id : String,
      @phone_number : String,
      @first_name : String,
      @last_name : String? = nil,
      @vcard : String? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @thumb_url : String? = nil,
      @thumb_width : Int32? = nil,
      @thumb_height : Int32? = nil,
    )
    end
  end

  # Represents a Game. Note: This will only work in Telegram versions released after October 1, 2016. Older
  # clients will not display any inline results if a game result is among them.
  class InlineQueryResultGame < Telegram::API::Type
    # Type of the result, must be game
    property type : String

    # Unique identifier for this result, 1-64 bytes
    property id : String

    # Short name of the game
    property game_short_name : String

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    def initialize(
      @type : String,
      @id : String,
      @game_short_name : String,
      @reply_markup : InlineKeyboardMarkup? = nil,
    )
    end
  end

  # Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user
  # with an optional caption. Alternatively, you can use input_message_content to send a message with the
  # specified content instead of the photo.
  class InlineQueryResultCachedPhoto < Telegram::API::Type
    # Type of the result, must be photo
    property type : String

    # Unique identifier for this result, 1-64 bytes
    property id : String

    # A valid file identifier of the photo
    property photo_file_id : String

    # Optional. Title for the result
    property title : String? = nil

    # Optional. Short description of the result
    property description : String? = nil

    # Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the photo
    property input_message_content : InputMessageContent? = nil

    def initialize(
      @type : String,
      @id : String,
      @photo_file_id : String,
      @title : String? = nil,
      @description : String? = nil,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file
  # will be sent by the user with an optional caption. Alternatively, you can use input_message_content to
  # send a message with specified content instead of the animation.
  class InlineQueryResultCachedGif < Telegram::API::Type
    # Type of the result, must be gif
    property type : String

    # Unique identifier for this result, 1-64 bytes
    property id : String

    # A valid file identifier for the GIF file
    property gif_file_id : String

    # Optional. Title for the result
    property title : String? = nil

    # Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the GIF animation
    property input_message_content : InputMessageContent? = nil

    def initialize(
      @type : String,
      @id : String,
      @gif_file_id : String,
      @title : String? = nil,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram
  # servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption.
  # Alternatively, you can use input_message_content to send a message with the specified content instead of
  # the animation.
  class InlineQueryResultCachedMpeg4Gif < Telegram::API::Type
    # Type of the result, must be mpeg4_gif
    property type : String

    # Unique identifier for this result, 1-64 bytes
    property id : String

    # A valid file identifier for the MP4 file
    property mpeg4_file_id : String

    # Optional. Title for the result
    property title : String? = nil

    # Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the video animation
    property input_message_content : InputMessageContent? = nil

    def initialize(
      @type : String,
      @id : String,
      @mpeg4_file_id : String,
      @title : String? = nil,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the
  # user. Alternatively, you can use input_message_content to send a message with the specified content
  # instead of the sticker. Note: This will only work in Telegram versions released after 9 April, 2016 for
  # static stickers and after 06 July, 2019 for animated stickers. Older clients will ignore them.
  class InlineQueryResultCachedSticker < Telegram::API::Type
    # Type of the result, must be sticker
    property type : String

    # Unique identifier for this result, 1-64 bytes
    property id : String

    # A valid file identifier of the sticker
    property sticker_file_id : String

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the sticker
    property input_message_content : InputMessageContent? = nil

    def initialize(
      @type : String,
      @id : String,
      @sticker_file_id : String,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
    )
    end
  end

  # Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with
  # an optional caption. Alternatively, you can use input_message_content to send a message with the
  # specified content instead of the file. Note: This will only work in Telegram versions released after 9
  # April, 2016. Older clients will ignore them.
  class InlineQueryResultCachedDocument < Telegram::API::Type
    # Type of the result, must be document
    property type : String

    # Unique identifier for this result, 1-64 bytes
    property id : String

    # Title for the result
    property title : String

    # A valid file identifier for the file
    property document_file_id : String

    # Optional. Short description of the result
    property description : String? = nil

    # Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the document caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the file
    property input_message_content : InputMessageContent? = nil

    def initialize(
      @type : String,
      @id : String,
      @title : String,
      @document_file_id : String,
      @description : String? = nil,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by
  # the user with an optional caption. Alternatively, you can use input_message_content to send a message
  # with the specified content instead of the video.
  class InlineQueryResultCachedVideo < Telegram::API::Type
    # Type of the result, must be video
    property type : String

    # Unique identifier for this result, 1-64 bytes
    property id : String

    # A valid file identifier for the video file
    property video_file_id : String

    # Title for the result
    property title : String

    # Optional. Short description of the result
    property description : String? = nil

    # Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the video caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the video
    property input_message_content : InputMessageContent? = nil

    def initialize(
      @type : String,
      @id : String,
      @video_file_id : String,
      @title : String,
      @description : String? = nil,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be
  # sent by the user. Alternatively, you can use input_message_content to send a message with the specified
  # content instead of the voice message. Note: This will only work in Telegram versions released after 9
  # April, 2016. Older clients will ignore them.
  class InlineQueryResultCachedVoice < Telegram::API::Type
    # Type of the result, must be voice
    property type : String

    # Unique identifier for this result, 1-64 bytes
    property id : String

    # A valid file identifier for the voice message
    property voice_file_id : String

    # Voice message title
    property title : String

    # Optional. Caption, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the voice message caption. See formatting options for more
    # details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the voice message
    property input_message_content : InputMessageContent? = nil

    def initialize(
      @type : String,
      @id : String,
      @voice_file_id : String,
      @title : String,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be
  # sent by the user. Alternatively, you can use input_message_content to send a message with the specified
  # content instead of the audio. Note: This will only work in Telegram versions released after 9 April, 2016.
  # Older clients will ignore them.
  class InlineQueryResultCachedAudio < Telegram::API::Type
    # Type of the result, must be audio
    property type : String

    # Unique identifier for this result, 1-64 bytes
    property id : String

    # A valid file identifier for the audio file
    property audio_file_id : String

    # Optional. Caption, 0-1024 characters after entities parsing
    property caption : String? = nil

    # Optional. Mode for parsing entities in the audio caption. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in the caption, which can be specified instead of
    # parse_mode
    property caption_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Inline keyboard attached to the message
    property reply_markup : InlineKeyboardMarkup? = nil

    # Optional. Content of the message to be sent instead of the audio
    property input_message_content : InputMessageContent? = nil

    def initialize(
      @type : String,
      @id : String,
      @audio_file_id : String,
      @caption : String? = nil,
      @parse_mode : ParseMode? = nil,
      @reply_markup : InlineKeyboardMarkup? = nil,
      @input_message_content : InputMessageContent? = nil,
      @caption_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents the content of a text message to be sent as the result of an inline query.
  class InputTextMessageContent < Telegram::API::Type
    # Text of the message to be sent, 1-4096 characters
    property message_text : String

    # Optional. Mode for parsing entities in the message text. See formatting options for more details.
    property parse_mode : ParseMode? = nil

    # Optional. List of special entities that appear in message text, which can be specified instead of
    # parse_mode
    property entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Disables link previews for links in the sent message
    property disable_web_page_preview : Bool? = nil

    def initialize(
      @message_text : String,
      @parse_mode : ParseMode? = nil,
      @disable_web_page_preview : Bool? = nil,
      @entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # Represents the content of a location message to be sent as the result of an inline query.
  class InputLocationMessageContent < Telegram::API::Type
    # Latitude of the location in degrees
    property latitude : Float64

    # Longitude of the location in degrees
    property longitude : Float64

    # Optional. The radius of uncertainty for the location, measured in meters; 0-1500
    property horizontal_accuracy : Float64? = nil

    # Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.
    property live_period : Int32? = nil

    # Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360
    # if specified.
    property heading : Int32? = nil

    # Optional. For live locations, a maximum distance for proximity alerts about approaching another chat
    # member, in meters. Must be between 1 and 100000 if specified.
    property proximity_alert_radius : Int32? = nil

    def initialize(
      @latitude : Float64,
      @longitude : Float64,
      @horizontal_accuracy : Float64? = nil,
      @live_period : Int32? = nil,
      @heading : Int32? = nil,
      @proximity_alert_radius : Int32? = nil,
    )
    end
  end

  # Represents the content of a venue message to be sent as the result of an inline query.
  class InputVenueMessageContent < Telegram::API::Type
    # Latitude of the venue in degrees
    property latitude : Float64

    # Longitude of the venue in degrees
    property longitude : Float64

    # Name of the venue
    property title : String

    # Address of the venue
    property address : String

    # Optional. Foursquare identifier of the venue, if known
    property foursquare_id : String? = nil

    # Optional. Foursquare type of the venue, if known. (For example, "arts_entertainment/default",
    # "arts_entertainment/aquarium" or "food/icecream".)
    property foursquare_type : String? = nil

    # Optional. Google Places identifier of the venue
    property google_place_id : String? = nil

    # Optional. Google Places type of the venue. (See supported types.)
    property google_place_type : String? = nil

    def initialize(
      @latitude : Float64,
      @longitude : Float64,
      @title : String,
      @address : String,
      @foursquare_id : String? = nil,
      @foursquare_type : String? = nil,
      @google_place_id : String? = nil,
      @google_place_type : String? = nil,
    )
    end
  end

  # Represents the content of a contact message to be sent as the result of an inline query.
  class InputContactMessageContent < Telegram::API::Type
    # Contact's phone number
    property phone_number : String

    # Contact's first name
    property first_name : String

    # Optional. Contact's last name
    property last_name : String? = nil

    # Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes
    property vcard : String? = nil

    def initialize(
      @phone_number : String,
      @first_name : String,
      @last_name : String? = nil,
      @vcard : String? = nil,
    )
    end
  end

  # Represents the content of an invoice message to be sent as the result of an inline query.
  class InputInvoiceMessageContent < Telegram::API::Type
    # Product name, 1-32 characters
    property title : String

    # Product description, 1-255 characters
    property description : String

    # Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal
    # processes.
    property payload : String

    # Payment provider token, obtained via Botfather
    property provider_token : String

    # Three-letter ISO 4217 currency code, see more on currencies
    property currency : String

    # Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery
    # cost, delivery tax, bonus, etc.)
    property prices : Array(LabeledPrice) = Array(LabeledPrice).new

    # Optional. The maximum accepted amount for tips in the smallest units of the currency (integer, not
    # float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter
    # in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the
    # majority of currencies). Defaults to 0
    property max_tip_amount : Int32? = nil

    # Optional. A JSON-serialized array of suggested amounts of tip in the smallest units of the currency
    # (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts
    # must be positive, passed in a strictly increased order and must not exceed max_tip_amount.
    property suggested_tip_amounts : Array(Int32) = Array(Int32).new

    # Optional. A JSON-serialized object for data about the invoice, which will be shared with the payment
    # provider. A detailed description of the required fields should be provided by the payment provider.
    property provider_data : String? = nil

    # Optional. URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a
    # service. People like it better when they see what they are paying for.
    property photo_url : String? = nil

    # Optional. Photo size
    property photo_size : Int32? = nil

    # Optional. Photo width
    property photo_width : Int32? = nil

    # Optional. Photo height
    property photo_height : Int32? = nil

    # Optional. Pass True, if you require the user's full name to complete the order
    property need_name : Bool? = nil

    # Optional. Pass True, if you require the user's phone number to complete the order
    property need_phone_number : Bool? = nil

    # Optional. Pass True, if you require the user's email address to complete the order
    property need_email : Bool? = nil

    # Optional. Pass True, if you require the user's shipping address to complete the order
    property need_shipping_address : Bool? = nil

    # Optional. Pass True, if user's phone number should be sent to provider
    property send_phone_number_to_provider : Bool? = nil

    # Optional. Pass True, if user's email address should be sent to provider
    property send_email_to_provider : Bool? = nil

    # Optional. Pass True, if the final price depends on the shipping method
    property is_flexible : Bool? = nil

    def initialize(
      @title : String,
      @description : String,
      @payload : String,
      @provider_token : String,
      @currency : String,
      @prices : Array(LabeledPrice) = Array(LabeledPrice).new,
      @max_tip_amount : Int32? = nil,
      @provider_data : String? = nil,
      @photo_url : String? = nil,
      @photo_size : Int32? = nil,
      @photo_width : Int32? = nil,
      @photo_height : Int32? = nil,
      @need_name : Bool? = nil,
      @need_phone_number : Bool? = nil,
      @need_email : Bool? = nil,
      @need_shipping_address : Bool? = nil,
      @send_phone_number_to_provider : Bool? = nil,
      @send_email_to_provider : Bool? = nil,
      @is_flexible : Bool? = nil,
      @suggested_tip_amounts : Array(Int32) = Array(Int32).new,
    )
    end
  end

  # Represents a result of an inline query that was chosen by the user and sent to their chat partner. Note: It is
  # necessary to enable inline feedback via @Botfather in order to receive these objects in updates.
  class ChosenInlineResult < Telegram::API::Type
    # The unique identifier for the result that was chosen
    property result_id : String

    # The user that chose the result
    property from : User

    # Optional. Sender location, only for bots that require user location
    property location : Location? = nil

    # Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to
    # the message. Will be also received in callback queries and can be used to edit the message.
    property inline_message_id : String? = nil

    # The query that was used to obtain the result
    property query : String

    def initialize(
      @result_id : String,
      @from : User,
      @query : String,
      @location : Location? = nil,
      @inline_message_id : String? = nil,
    )
    end
  end

  # This object represents a portion of the price for goods or services.
  class LabeledPrice < Telegram::API::Type
    # Portion label
    property label : String

    # Price of the product in the smallest units of the currency (integer, not float/double). For example, for a
    # price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits
    # past the decimal point for each currency (2 for the majority of currencies).
    property amount : Int32

    def initialize(
      @label : String,
      @amount : Int32,
    )
    end
  end

  # This object contains basic information about an invoice.
  class Invoice < Telegram::API::Type
    # Product name
    property title : String

    # Product description
    property description : String

    # Unique bot deep-linking parameter that can be used to generate this invoice
    property start_parameter : String

    # Three-letter ISO 4217 currency code
    property currency : String

    # Total price in the smallest units of the currency (integer, not float/double). For example, for a price of
    # US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the
    # decimal point for each currency (2 for the majority of currencies).
    property total_amount : Int32

    def initialize(
      @title : String,
      @description : String,
      @start_parameter : String,
      @currency : String,
      @total_amount : Int32,
    )
    end
  end

  # This object represents a shipping address.
  class ShippingAddress < Telegram::API::Type
    # ISO 3166-1 alpha-2 country code
    property country_code : String

    # State, if applicable
    property state : String

    # City
    property city : String

    # First line for the address
    property street_line1 : String

    # Second line for the address
    property street_line2 : String

    # Address post code
    property post_code : String

    def initialize(
      @country_code : String,
      @state : String,
      @city : String,
      @street_line1 : String,
      @street_line2 : String,
      @post_code : String,
    )
    end
  end

  # This object represents information about an order.
  class OrderInfo < Telegram::API::Type
    # Optional. User name
    property name : String? = nil

    # Optional. User's phone number
    property phone_number : String? = nil

    # Optional. User email
    property email : String? = nil

    # Optional. User shipping address
    property shipping_address : ShippingAddress? = nil

    def initialize(
      @name : String? = nil,
      @phone_number : String? = nil,
      @email : String? = nil,
      @shipping_address : ShippingAddress? = nil,
    )
    end
  end

  # This object represents one shipping option.
  class ShippingOption < Telegram::API::Type
    # Shipping option identifier
    property id : String

    # Option title
    property title : String

    # List of price portions
    property prices : Array(LabeledPrice) = Array(LabeledPrice).new

    def initialize(
      @id : String,
      @title : String,
      @prices : Array(LabeledPrice) = Array(LabeledPrice).new,
    )
    end
  end

  # This object contains basic information about a successful payment.
  class SuccessfulPayment < Telegram::API::Type
    # Three-letter ISO 4217 currency code
    property currency : String

    # Total price in the smallest units of the currency (integer, not float/double). For example, for a price of
    # US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the
    # decimal point for each currency (2 for the majority of currencies).
    property total_amount : Int32

    # Bot specified invoice payload
    property invoice_payload : String

    # Optional. Identifier of the shipping option chosen by the user
    property shipping_option_id : String? = nil

    # Optional. Order info provided by the user
    property order_info : OrderInfo? = nil

    # Telegram payment identifier
    property telegram_payment_charge_id : String

    # Provider payment identifier
    property provider_payment_charge_id : String

    def initialize(
      @currency : String,
      @total_amount : Int32,
      @invoice_payload : String,
      @telegram_payment_charge_id : String,
      @provider_payment_charge_id : String,
      @shipping_option_id : String? = nil,
      @order_info : OrderInfo? = nil,
    )
    end
  end

  # This object contains information about an incoming shipping query.
  class ShippingQuery < Telegram::API::Type
    # Unique query identifier
    property id : String

    # User who sent the query
    property from : User

    # Bot specified invoice payload
    property invoice_payload : String

    # User specified shipping address
    property shipping_address : ShippingAddress

    def initialize(
      @id : String,
      @from : User,
      @invoice_payload : String,
      @shipping_address : ShippingAddress,
    )
    end
  end

  # This object contains information about an incoming pre-checkout query.
  class PreCheckoutQuery < Telegram::API::Type
    # Unique query identifier
    property id : String

    # User who sent the query
    property from : User

    # Three-letter ISO 4217 currency code
    property currency : String

    # Total price in the smallest units of the currency (integer, not float/double). For example, for a price of
    # US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the
    # decimal point for each currency (2 for the majority of currencies).
    property total_amount : Int32

    # Bot specified invoice payload
    property invoice_payload : String

    # Optional. Identifier of the shipping option chosen by the user
    property shipping_option_id : String? = nil

    # Optional. Order info provided by the user
    property order_info : OrderInfo? = nil

    def initialize(
      @id : String,
      @from : User,
      @currency : String,
      @total_amount : Int32,
      @invoice_payload : String,
      @shipping_option_id : String? = nil,
      @order_info : OrderInfo? = nil,
    )
    end
  end

  # Contains information about Telegram Passport data shared with the bot by the user.
  class PassportData < Telegram::API::Type
    # Array with information about documents and other Telegram Passport elements that was shared with the bot
    property data : Array(EncryptedPassportElement) = Array(EncryptedPassportElement).new

    # Encrypted credentials required to decrypt the data
    property credentials : EncryptedCredentials

    def initialize(
      @credentials : EncryptedCredentials,
      @data : Array(EncryptedPassportElement) = Array(EncryptedPassportElement).new,
    )
    end
  end

  # This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in
  # JPEG format when decrypted and don't exceed 10MB.
  class PassportFile < Telegram::API::Type
    # Identifier for this file, which can be used to download or reuse the file
    property file_id : String

    # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be
    # used to download or reuse the file.
    property file_unique_id : String

    # File size in bytes
    property file_size : Int32

    # Unix time when the file was uploaded
    property file_date : Int32

    def initialize(
      @file_id : String,
      @file_unique_id : String,
      @file_size : Int32,
      @file_date : Int32,
    )
    end
  end

  # Contains information about documents or other Telegram Passport elements shared with the bot by the user.
  class EncryptedPassportElement < Telegram::API::Type
    # Element type. One of "personal_details", "passport", "driver_license", "identity_card",
    # "internal_passport", "address", "utility_bill", "bank_statement", "rental_agreement",
    # "passport_registration", "temporary_registration", "phone_number", "email".
    property type : String

    # Optional. Base64-encoded encrypted Telegram Passport element data provided by the user, available for
    # "personal_details", "passport", "driver_license", "identity_card", "internal_passport" and
    # "address" types. Can be decrypted and verified using the accompanying EncryptedCredentials.
    property data : String? = nil

    # Optional. User's verified phone number, available only for "phone_number" type
    property phone_number : String? = nil

    # Optional. User's verified email address, available only for "email" type
    property email : String? = nil

    # Optional. Array of encrypted files with documents provided by the user, available for "utility_bill",
    # "bank_statement", "rental_agreement", "passport_registration" and "temporary_registration"
    # types. Files can be decrypted and verified using the accompanying EncryptedCredentials.
    property files : Array(PassportFile) = Array(PassportFile).new

    # Optional. Encrypted file with the front side of the document, provided by the user. Available for
    # "passport", "driver_license", "identity_card" and "internal_passport". The file can be decrypted and
    # verified using the accompanying EncryptedCredentials.
    property front_side : PassportFile? = nil

    # Optional. Encrypted file with the reverse side of the document, provided by the user. Available for
    # "driver_license" and "identity_card". The file can be decrypted and verified using the accompanying
    # EncryptedCredentials.
    property reverse_side : PassportFile? = nil

    # Optional. Encrypted file with the selfie of the user holding a document, provided by the user; available
    # for "passport", "driver_license", "identity_card" and "internal_passport". The file can be decrypted
    # and verified using the accompanying EncryptedCredentials.
    property selfie : PassportFile? = nil

    # Optional. Array of encrypted files with translated versions of documents provided by the user. Available
    # if requested for "passport", "driver_license", "identity_card", "internal_passport",
    # "utility_bill", "bank_statement", "rental_agreement", "passport_registration" and
    # "temporary_registration" types. Files can be decrypted and verified using the accompanying
    # EncryptedCredentials.
    property translation : Array(PassportFile) = Array(PassportFile).new

    # Base64-encoded element hash for using in PassportElementErrorUnspecified
    property hash : String

    def initialize(
      @type : String,
      @hash : String,
      @data : String? = nil,
      @phone_number : String? = nil,
      @email : String? = nil,
      @front_side : PassportFile? = nil,
      @reverse_side : PassportFile? = nil,
      @selfie : PassportFile? = nil,
      @files : Array(PassportFile) = Array(PassportFile).new,
      @translation : Array(PassportFile) = Array(PassportFile).new,
    )
    end
  end

  # Contains data required for decrypting and authenticating EncryptedPassportElement. See the Telegram
  # Passport Documentation for a complete description of the data decryption and authentication processes.
  class EncryptedCredentials < Telegram::API::Type
    # Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets
    # required for EncryptedPassportElement decryption and authentication
    property data : String

    # Base64-encoded data hash for data authentication
    property hash : String

    # Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption
    property secret : String

    def initialize(
      @data : String,
      @hash : String,
      @secret : String,
    )
    end
  end

  # This object represents an error in the Telegram Passport element which was submitted that should be
  # resolved by the user. It should be one of: - PassportElementErrorDataField -
  # PassportElementErrorFrontSide - PassportElementErrorReverseSide - PassportElementErrorSelfie -
  # PassportElementErrorFile - PassportElementErrorFiles - PassportElementErrorTranslationFile -
  # PassportElementErrorTranslationFiles - PassportElementErrorUnspecified
  class PassportElementError < Telegram::API::Type
  end

  # Represents an issue in one of the data fields that was provided by the user. The error is considered resolved
  # when the field's value changes.
  class PassportElementErrorDataField < Telegram::API::Type
    # Error source, must be data
    property source : String

    # The section of the user's Telegram Passport which has the error, one of "personal_details", "passport",
    # "driver_license", "identity_card", "internal_passport", "address"
    property type : String

    # Name of the data field which has the error
    property field_name : String

    # Base64-encoded data hash
    property data_hash : String

    # Error message
    property message : String

    def initialize(
      @source : String,
      @type : String,
      @field_name : String,
      @data_hash : String,
      @message : String,
    )
    end
  end

  # Represents an issue with the front side of a document. The error is considered resolved when the file with
  # the front side of the document changes.
  class PassportElementErrorFrontSide < Telegram::API::Type
    # Error source, must be front_side
    property source : String

    # The section of the user's Telegram Passport which has the issue, one of "passport", "driver_license",
    # "identity_card", "internal_passport"
    property type : String

    # Base64-encoded hash of the file with the front side of the document
    property file_hash : String

    # Error message
    property message : String

    def initialize(
      @source : String,
      @type : String,
      @file_hash : String,
      @message : String,
    )
    end
  end

  # Represents an issue with the reverse side of a document. The error is considered resolved when the file with
  # reverse side of the document changes.
  class PassportElementErrorReverseSide < Telegram::API::Type
    # Error source, must be reverse_side
    property source : String

    # The section of the user's Telegram Passport which has the issue, one of "driver_license",
    # "identity_card"
    property type : String

    # Base64-encoded hash of the file with the reverse side of the document
    property file_hash : String

    # Error message
    property message : String

    def initialize(
      @source : String,
      @type : String,
      @file_hash : String,
      @message : String,
    )
    end
  end

  # Represents an issue with the selfie with a document. The error is considered resolved when the file with the
  # selfie changes.
  class PassportElementErrorSelfie < Telegram::API::Type
    # Error source, must be selfie
    property source : String

    # The section of the user's Telegram Passport which has the issue, one of "passport", "driver_license",
    # "identity_card", "internal_passport"
    property type : String

    # Base64-encoded hash of the file with the selfie
    property file_hash : String

    # Error message
    property message : String

    def initialize(
      @source : String,
      @type : String,
      @file_hash : String,
      @message : String,
    )
    end
  end

  # Represents an issue with a document scan. The error is considered resolved when the file with the document
  # scan changes.
  class PassportElementErrorFile < Telegram::API::Type
    # Error source, must be file
    property source : String

    # The section of the user's Telegram Passport which has the issue, one of "utility_bill",
    # "bank_statement", "rental_agreement", "passport_registration", "temporary_registration"
    property type : String

    # Base64-encoded file hash
    property file_hash : String

    # Error message
    property message : String

    def initialize(
      @source : String,
      @type : String,
      @file_hash : String,
      @message : String,
    )
    end
  end

  # Represents an issue with a list of scans. The error is considered resolved when the list of files containing
  # the scans changes.
  class PassportElementErrorFiles < Telegram::API::Type
    # Error source, must be files
    property source : String

    # The section of the user's Telegram Passport which has the issue, one of "utility_bill",
    # "bank_statement", "rental_agreement", "passport_registration", "temporary_registration"
    property type : String

    # List of base64-encoded file hashes
    property file_hashes : Array(String) = Array(String).new

    # Error message
    property message : String

    def initialize(
      @source : String,
      @type : String,
      @message : String,
      @file_hashes : Array(String) = Array(String).new,
    )
    end
  end

  # Represents an issue with one of the files that constitute the translation of a document. The error is
  # considered resolved when the file changes.
  class PassportElementErrorTranslationFile < Telegram::API::Type
    # Error source, must be translation_file
    property source : String

    # Type of element of the user's Telegram Passport which has the issue, one of "passport", "driver_license",
    # "identity_card", "internal_passport", "utility_bill", "bank_statement", "rental_agreement",
    # "passport_registration", "temporary_registration"
    property type : String

    # Base64-encoded file hash
    property file_hash : String

    # Error message
    property message : String

    def initialize(
      @source : String,
      @type : String,
      @file_hash : String,
      @message : String,
    )
    end
  end

  # Represents an issue with the translated version of a document. The error is considered resolved when a file
  # with the document translation change.
  class PassportElementErrorTranslationFiles < Telegram::API::Type
    # Error source, must be translation_files
    property source : String

    # Type of element of the user's Telegram Passport which has the issue, one of "passport", "driver_license",
    # "identity_card", "internal_passport", "utility_bill", "bank_statement", "rental_agreement",
    # "passport_registration", "temporary_registration"
    property type : String

    # List of base64-encoded file hashes
    property file_hashes : Array(String) = Array(String).new

    # Error message
    property message : String

    def initialize(
      @source : String,
      @type : String,
      @message : String,
      @file_hashes : Array(String) = Array(String).new,
    )
    end
  end

  # Represents an issue in an unspecified place. The error is considered resolved when new data is added.
  class PassportElementErrorUnspecified < Telegram::API::Type
    # Error source, must be unspecified
    property source : String

    # Type of element of the user's Telegram Passport which has the issue
    property type : String

    # Base64-encoded element hash
    property element_hash : String

    # Error message
    property message : String

    def initialize(
      @source : String,
      @type : String,
      @element_hash : String,
      @message : String,
    )
    end
  end

  # This object represents a game. Use BotFather to create and edit games, their short names will act as unique
  # identifiers.
  class Game < Telegram::API::Type
    # Title of the game
    property title : String

    # Description of the game
    property description : String

    # Photo that will be displayed in the game message in chats.
    property photo : Array(PhotoSize) = Array(PhotoSize).new

    # Optional. Brief description of the game or high scores included in the game message. Can be automatically
    # edited to include current high scores for the game when the bot calls setGameScore, or manually edited
    # using editMessageText. 0-4096 characters.
    property text : String? = nil

    # Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc.
    property text_entities : Array(MessageEntity) = Array(MessageEntity).new

    # Optional. Animation that will be displayed in the game message in chats. Upload via BotFather
    property animation : Animation? = nil

    def initialize(
      @title : String,
      @description : String,
      @photo : Array(PhotoSize) = Array(PhotoSize).new,
      @text : String? = nil,
      @animation : Animation? = nil,
      @text_entities : Array(MessageEntity) = Array(MessageEntity).new,
    )
    end
  end

  # A placeholder, currently holds no information. Use BotFather to set up your game.
  class CallbackGame < Telegram::API::Type
  end

  # This object represents one row of the high scores table for a game.
  class GameHighScore < Telegram::API::Type
    # Position in high score table for the game
    property position : Int32

    # User
    property user : User

    # Score
    property score : Int32

    def initialize(
      @position : Int32,
      @user : User,
      @score : Int32,
    )
    end
  end

end